package org.eso.ias.dasu

import org.ias.prototype.logging.IASLogger
import org.eso.ias.cdb.CdbReader
import org.eso.ias.cdb.json.JsonReader
import org.eso.ias.cdb.json.CdbFiles
import org.eso.ias.cdb.json.CdbJsonFiles
import org.eso.ias.cdb.pojos.DasuDao
import org.eso.ias.dasu.topology.Topology

import scala.collection.JavaConverters
import org.eso.ias.cdb.pojos.DasuDao
import org.eso.ias.prototype.input.Identifier
import org.eso.ias.prototype.input.java.IdentifierType
import org.eso.ias.cdb.pojos.AsceDao
import org.eso.ias.prototype.compele.ComputingElement
import org.eso.ias.prototype.compele.ComputingElementState
import org.eso.ias.prototype.compele.AsceStates

/**
 * The Distributed Alarm System Unit or DASU
 * 
 * @constructor create a DASU with the give identifier
 * @param is the identifier of the DASU 
 */
class Dasu(val id: String) {
  
  /** The logger */
  val logger = IASLogger.getLogger(Dasu.getClass);
  
  /** The identifier of the DASU
   *  
   *  In this version it has no parent identifier because
   *  the Supervisor has not yet been implemented
   */
  val dasuIdentifier: Identifier = new Identifier(id,IdentifierType.DASU,None)
  
  logger.info("Reading CDB configuration of [{}] DASU",dasuIdentifier.toString())
  
  // Read configuration from CDB
  val cdbFiles: CdbFiles = new CdbJsonFiles("../test")
  val cdbReader: CdbReader = new JsonReader(cdbFiles)
  
  val dasuOptional = cdbReader.getDasu(id)
  require(dasuOptional.isPresent(),"DASU ["+id+"] configuration not found on cdb")
  val dasuDao: DasuDao = dasuOptional.get
  logger.debug("DASU [{}] configuration red from CDB",id)
  
  /**
   * The configuration of the ASCEs that run in the DASU
   */
  val asceDaos = JavaConverters.asScalaSet(dasuDao.getAsces).toList
  
  // Are there ASCEs assigned to this DASU?
  require(dasuDao.getAsces.size()>0,"No ASCE found for DASU "+id)
  logger.info("DASU [{}]: {} ASCEs to run",id,""+dasuDao.getAsces.size())
  
  // The ID of the output generated by the DASU
  val dasuOutputId = dasuDao.getOutput().getId()
  
  // Build the topology
  val dasuTopology: Topology = new Topology(
      id,
      dasuOutputId,
      asceDaos)
  logger.debug("DASU [{}]: topology built",id) 
  
  // Instantiate the ASCEs
  val addToMapFunc = (m: Map[String, ComputingElement[_]], asce: AsceDao) => 
    m + (asce.getId -> ComputingElement(asce,dasuIdentifier,System.getProperties()))
  val asces: Map[String, ComputingElement[_]] = asceDaos.foldLeft(Map[String,ComputingElement[_]]())(addToMapFunc)
  logger.info("DASU [{}] activated the ASCEs. Now will initilalize them..",id)
    
  // Activate the ASCEs
  val ascesInitedOk=asces.valuesIterator.map(asce => asce.initialize()).forall(s => s.actualState==AsceStates.Healthy)
  assert(ascesInitedOk,"At least one ASCE did not pass the initialization")
  logger.info("DASU [{}]: ASCEs initialized",id)
  
  // The ASCE that produces the output of the DASU
  val asceThatProducesTheOutput = dasuTopology.asceProducingOutput(dasuOutputId).map(asces.get)
  require(asceThatProducesTheOutput.isDefined && !asceThatProducesTheOutput.isEmpty,"ASCE producing output not found")
  logger.info("The output [{}] of the DASU [{}] is produced by {{}] ASCE",dasuOutputId,id,asceThatProducesTheOutput)
  
  // Get the required refresh rate i.e. the rate to produce the output 
  // of the DASU that is given by the ASCE that produces such IASIO
  val refreshRate = asceDaos.find(_.getId==dasuOutputId).map(asce => asce.getOutput().getRefreshRate())
  require(Option(refreshRate).isDefined,"Refresh rate not found!")
  logger.info("The DASU [{}] produces the output [{}} at a rate of {}ms",id,dasuOutputId,""+refreshRate.get)
  
  // - Connect to the IASIOs queue (input and output)
  // - Start the loop:
  //  - Get IASIOs and forward them to the ASCEs
  //  - Get and send to the IASIO queue the output of the DASU
  
  
}

object Dasu {
  def main(args: Array[String]) {
    require(args.length==1,"DASU identifier missing in command line")
    
    
    val dasu = new Dasu(args(0))
  }
}