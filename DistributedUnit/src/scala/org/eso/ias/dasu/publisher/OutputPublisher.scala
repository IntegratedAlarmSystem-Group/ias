package org.eso.ias.dasu.publisher

import scala.util.Try
import org.eso.ias.prototype.input.java.IASValue

/**
 * The OutputPublisher publishes the output generated by the
 * DASU.
 * 
 * The DASU keeps publishing the output even in case of error.
 * 
 * initialize() must be called before the subscriber is
 * ready to publish events.
 * cleanUp() must be called before terminating with the subscriber to let it 
 * release all the acquired resources.
 */
trait OutputPublisher {
  
  /** 
   *  Initialize the subscriber.
   *  
   *  The subscriber is supposed to acquire the resource and do all
   *  the initialization to be ready to publish IASValues. 
   *  
   *  @return Success or Failure if the initialization went well 
   *          or encountered a problem  
   */
  def initialize(): Try[Unit]
  
  /**
   * Release all the acquired resources.
   */
  def cleanUp(): Try[Unit]
  
  /**
   * Publish the output.
   * 
   * @param aisio the not null IASIO to publish
   * @return a try to let the caller aware of errors publishing
   */
  def publish(iasio: IASValue[_]): Try[Unit]  
}