package org.eso.ias.plugin.test.publisher;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

import org.eso.ias.types.IasValidity;
import org.eso.ias.types.OperationalMode;
import org.eso.ias.plugin.Sample;
import org.eso.ias.plugin.ValueToSend;
import org.eso.ias.plugin.filter.Filter.EnrichedSample;
import org.eso.ias.plugin.publisher.BufferedMonitoredSystemData;
import org.eso.ias.plugin.publisher.BufferedPublisherBase;
import org.eso.ias.plugin.publisher.MonitorPointDataToBuffer;
import org.eso.ias.plugin.publisher.impl.JsonFilePublisher;
import org.eso.ias.plugin.thread.PluginThreadFactory;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Test {@link JsonFilePublisher}
 * 
 * @author acaproni
 *
 */
public class JsonPusblisherTest {
	
	/**
	 * The JSON publisher to test
	 */
	private JsonFilePublisher publisher;
	
	/**
	 * Plugin identifier
	 */
	private static final String PLUGIN_ID = "SystemIdent";
	
	/**
	 * Monitored System identifier
	 */
	private static final String MONITORED_SYSTEM_ID = "MonSysIdent";
	
	/**
	 * The name of the server (ignored by the JSON publisher)
	 */
	private static final String SERVER_NAME = "ias.server.eso.org";
	
	/**
	 * The port of the server (ignored by the JSON publisher)
	 */
	private static final int PORT = 1967;
	
	/**
	 * The JSON file generated by the publisher
	 */
	private File jsonFile;
	
	/**
	 * The logger
	 */
	private final static Logger logger = LoggerFactory.getLogger(JsonPusblisherTest.class);
	
	@BeforeEach
	public void setUp() throws Exception {
		jsonFile = File.createTempFile("JsonPusblisherTest", ".json", new File(System.getProperty("ias.tmp.folder")));
		logger.info("JSON data will be written in: {}",jsonFile.getAbsolutePath());
		
		BufferedWriter writer = new BufferedWriter(new FileWriter(jsonFile));
		
		int poolSize = Runtime.getRuntime().availableProcessors()/2;
		ScheduledExecutorService schedExecutorSvc= Executors.newScheduledThreadPool(poolSize, new PluginThreadFactory());
		publisher = new JsonFilePublisher(PLUGIN_ID, MONITORED_SYSTEM_ID, SERVER_NAME, PORT, schedExecutorSvc, writer);
		logger.info("JsonFilePublisher built for plugin {} monitoring system {}",PLUGIN_ID,MONITORED_SYSTEM_ID);
		publisher.setUp();
		publisher.startSending();
	}
	
	@AfterEach
	public void tearDown() throws Exception {
		publisher.tearDown();
	}

	@Test
	public void testPublishing() throws Exception {
		List<EnrichedSample> samples = Arrays.asList(new EnrichedSample(new Sample(Integer.valueOf(67)),true));
		
		List<ValueToSend> values = Arrays.asList(
				new ValueToSend("FV-ID1", Double.valueOf(6.7), samples, System.currentTimeMillis(),OperationalMode.UNKNOWN,IasValidity.UNRELIABLE),
				new ValueToSend("FV-ID2", Long.valueOf(1123), samples, System.currentTimeMillis(),OperationalMode.OPERATIONAL,IasValidity.RELIABLE),
				new ValueToSend("FV-ID3", "Another string", samples, System.currentTimeMillis(),OperationalMode.MAINTENANCE,IasValidity.UNRELIABLE),
				new ValueToSend("FV-ID4", Boolean.valueOf(false), samples, System.currentTimeMillis(),OperationalMode.STARTUP,IasValidity.RELIABLE),
				new ValueToSend("FV-ID5", Integer.valueOf(-98), samples, System.currentTimeMillis(),OperationalMode.UNKNOWN,IasValidity.UNRELIABLE));
		
		Map<String, ValueToSend> mapOfValues = new HashMap<>();

		for (ValueToSend v: values) {
			publisher.offer(v);
			mapOfValues.put(v.id, v);
		};
		
		// Give the publisher time to write
		Thread.sleep(5*BufferedPublisherBase.throttlingTime);
		
		// Read JSON data from file
		ObjectMapper mapper = new ObjectMapper();
		BufferedMonitoredSystemData msData = mapper.readValue(jsonFile, BufferedMonitoredSystemData.class);
		assertEquals(PLUGIN_ID,msData.getSystemID());
		assertEquals(MONITORED_SYSTEM_ID,msData.getMonitoredSystemID());
		assertEquals(values.size(),msData.getMonitorPoints().size());
		
		// Check the correctness of all the  MonitorPointData in the date 
		// against the submitted FilteredValue-s
		for (MonitorPointDataToBuffer mpd: msData.getMonitorPoints()) {
			ValueToSend fv = mapOfValues.get(mpd.getId());
			assertNotNull(fv);
			System.out.println("FV="+fv.toString());
			System.out.println("MPD="+mpd.toString());
			assertTrue(PublisherTestCommon.match(fv, mpd),"Filtered value and the published data mismatch");
		}
		// Ok, everything went fine: the JSON file can be removed
		jsonFile.deleteOnExit();
	}

}
