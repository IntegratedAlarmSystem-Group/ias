package org.eso.ias.transfer.test

import java.util.Properties

import org.eso.ias.asce.exceptions.PropsMisconfiguredException
import org.eso.ias.asce.transfer.IasIO
import org.eso.ias.logging.IASLogger
import org.eso.ias.tranfer.ThresholdWithBackupsAndDelay
import org.eso.ias.types._
import org.scalatest.FlatSpec

/**
  * Test the ThresholdWithBackupsAndDelay transfer function
  */
class ThresholdBackupAndDelayTest extends FlatSpec {

  /** The logger */
  val logger = IASLogger.getLogger(this.getClass)

  /**  The ID of the SUPERVISOR where the components runs */
  val supervId = new Identifier("SupervId",IdentifierType.SUPERVISOR,None)

  /**  The ID of the DASU where the components runs */
  val dasuId = new Identifier("DasuId",IdentifierType.DASU,supervId)

  /** The ID of the component running into the DASU */
  val compID = new Identifier("ASCE-ID-ForTest",IdentifierType.ASCE,Option(dasuId))

  /** The ID of the output generated by the component */
  val outId = new Identifier("OutputId",IdentifierType.IASIO, Some(compID))

  /** the IASIO in output */
  val out: IasIO[Double] = new IasIO(InOut.asOutput(outId,IASTypes.ALARM))

  val inputIds: List[String] = (for (i <- 1 to 5) yield "InputID"+i).toList

  val inputIDentifiers= inputIds.map(id => new Identifier(id,IdentifierType.IASIO, Some(compID)))

  /** The ID of the main AISIO */
  val aId = new Identifier("A",IdentifierType.IASIO, Some(compID))

  /** The time frame for the validity */
  val validityTimeFrame = 2000

  /** Default set of properties for testing */
  val defaultProps: Properties = {
    val props = new Properties
    props.put(ThresholdWithBackupsAndDelay.HighOnPropName,"10")
    props.put(ThresholdWithBackupsAndDelay.HighOffPropName,"8")
    props.put(ThresholdWithBackupsAndDelay.LowOnPropName,"-12")
    props.put(ThresholdWithBackupsAndDelay.LowOffPropName,"-5")
    props.put(ThresholdWithBackupsAndDelay.AlarmPriorityPropName,Alarm.SET_CRITICAL.name())
    props.put(ThresholdWithBackupsAndDelay.DelayToSetTimePropName,"2")
    props.put(ThresholdWithBackupsAndDelay.DelayToClearTimePropName,"3")
    props.put(ThresholdWithBackupsAndDelay.MaindIdPropName,"ID")
    props
  }

  /** Default ThresholdWithBackupsAndDelay TF to test */
  val defaultTF = new ThresholdWithBackupsAndDelay(compID.id,compID.fullRunningID,validityTimeFrame,defaultProps)

  /**
    *  Build the IASIO in input with the passed id, type and timestamp
    *
    *  @param id The identifier of the input
    *  @param value initial value
    *  @param tStamp the daus production timestamp
    *  @param mode the operational mode
    */
  def buildInput(
                  id: Identifier,
                  value: Double,
                  tStamp: Long = System.currentTimeMillis(),
                  mode: OperationalMode = OperationalMode.OPERATIONAL,
                  validity: IasValidity = IasValidity.RELIABLE): IasIO[Double] = {

    val inout: InOut[Double] = InOut.asInput(id,IASTypes.DOUBLE)
      .updateDasuProdTStamp(tStamp)
      .updateValueValidity(Some(value),Some(Validity(validity)))
    (new IasIO(inout)).updateMode(mode)
  }

  behavior of "The ThresholdWithBackupsAndDelay"

  it must "get the list from the property" in {
    assert(defaultTF.highOn==10)
    assert(defaultTF.highOff==8)
    assert(defaultTF.lowOn==(-12))
    assert(defaultTF.lowOff==(-5))
    assert(defaultTF.alarmPriority==Alarm.SET_CRITICAL)
    assert(defaultTF.delayToSet==2000)
    assert(defaultTF.delayToClear==3000)
    assert(defaultTF.idOfMainInput==Some("ID"))
  }

  it must "correctly intialize" in {
    defaultTF.initialize()
  }

  it must "catch errors in parameters" in {
    val props = new Properties
    props.put(ThresholdWithBackupsAndDelay.HighOnPropName,"10")
    props.put(ThresholdWithBackupsAndDelay.HighOffPropName,"12") // Error!
    props.put(ThresholdWithBackupsAndDelay.LowOnPropName,"-12")
    props.put(ThresholdWithBackupsAndDelay.LowOffPropName,"-5")
    props.put(ThresholdWithBackupsAndDelay.AlarmPriorityPropName,Alarm.SET_CRITICAL.name())
    props.put(ThresholdWithBackupsAndDelay.DelayToSetTimePropName,"2")
    props.put(ThresholdWithBackupsAndDelay.DelayToClearTimePropName,"3")
    props.put(ThresholdWithBackupsAndDelay.MaindIdPropName,"ID")


    val tf = new ThresholdWithBackupsAndDelay(compID.id,compID.fullRunningID,validityTimeFrame,props)
    assertThrows[PropsMisconfiguredException] { tf.initialize() }

    props.put(ThresholdWithBackupsAndDelay.HighOffPropName,"8") // Removes previous error
    props.put(ThresholdWithBackupsAndDelay.LowOnPropName,"0") // New Error
    val tf2 = new ThresholdWithBackupsAndDelay(compID.id,compID.fullRunningID,validityTimeFrame,props)
    assertThrows[PropsMisconfiguredException] { tf2.initialize() }

    props.put(ThresholdWithBackupsAndDelay.LowOnPropName,"-12") // Removes previous error
    props.put(ThresholdWithBackupsAndDelay.AlarmPriorityPropName,Alarm.CLEARED.name())
    val tf3 = new ThresholdWithBackupsAndDelay(compID.id,compID.fullRunningID,validityTimeFrame,props)
    assertThrows[PropsMisconfiguredException] { tf3.initialize() }

    props.put(ThresholdWithBackupsAndDelay.AlarmPriorityPropName,Alarm.SET_MEDIUM.name()) // Removes previous error
    props.put(ThresholdWithBackupsAndDelay.DelayToSetTimePropName,"-1")
    val tf4 = new ThresholdWithBackupsAndDelay(compID.id,compID.fullRunningID,validityTimeFrame,props)
    assertThrows[PropsMisconfiguredException] { tf4.initialize() }

    props.put(ThresholdWithBackupsAndDelay.DelayToSetTimePropName,"0") // Removes previous error
    props.put(ThresholdWithBackupsAndDelay.DelayToClearTimePropName,"-1")
    val tf5 = new ThresholdWithBackupsAndDelay(compID.id,compID.fullRunningID,validityTimeFrame,props)
    assertThrows[PropsMisconfiguredException] { tf5.initialize() }

    props.put(ThresholdWithBackupsAndDelay.DelayToClearTimePropName,"5") // Removes previous error
    props.put(ThresholdWithBackupsAndDelay.MaindIdPropName,"")
    val tf6 = new ThresholdWithBackupsAndDelay(compID.id,compID.fullRunningID,validityTimeFrame,props)
    assertThrows[PropsMisconfiguredException] { tf6.initialize() }

  }


}
