package org.eso.ias.transfer.test

import java.util.Properties

import org.eso.ias.asce.transfer.{IasIO, IasioInfo}
import org.eso.ias.logging.IASLogger
import org.eso.ias.tranfer.BoolToAlarm
import org.eso.ias.types._
import org.scalatest.FlatSpec

/** Test the [[org.eso.ias.tranfer.BoolToAlarm]] transfer function  */
class BoolToAlarmTest extends FlatSpec {

  /** The logger */
  private val logger = IASLogger.getLogger(this.getClass)

  /**  The ID of the SUPERVISOR where the components runs */
  val supervId = new Identifier("SupervId",IdentifierType.SUPERVISOR,None)

  /**  The ID of the DASU where the components runs */
  val dasuId = new Identifier("DasuId",IdentifierType.DASU,supervId)

  /** The ID of the component running into the DASU */
  val compID = new Identifier("ASCE-ID-ForTest",IdentifierType.ASCE,Option(dasuId))

  /** The ID of the output generated by the component */
  val outId = new Identifier("OutputId",IdentifierType.IASIO, Some(compID))

  /** the IASIO in output */
  val out: IasIO[Alarm] = new IasIO(InOut.asOutput(outId,IASTypes.ALARM))

  /** Ouput info for the initialize */
  val outputInfo = new IasioInfo(outId.id,IASTypes.ALARM)

  /** THe id of th einput */
  val inputId = "Input-Id"

  /** The Identifier of the ALARM input */
  val inputIdentifier= new Identifier(inputId,IdentifierType.IASIO, Some(compID))

  /** Inputs Info for the initialize */
  val inputInOut =  InOut.asInput(inputIdentifier,IASTypes.BOOLEAN)

  /** Inputs Info for the initialize */
  val inputInfos = Set(new IasioInfo(inputId,IASTypes.BOOLEAN))

  /** The time frame for the validity */
  val validityTimeFrame = 2000

  behavior of "The BoolToAlarmTest"

  it must "get priority and logic from props or use defaults" in {
    val props = new Properties()

    val tf = new BoolToAlarm(compID.id, compID.fullRunningID, validityTimeFrame, props)

    assert(tf.priority==Alarm.SET_MEDIUM)
    assert(tf.invert==false)

    props.put(BoolToAlarm.InvertLogicPropName,"True")
    props.put(BoolToAlarm.PriorityPropName,Alarm.SET_HIGH.toString)
    val tf2 = new BoolToAlarm(compID.id, compID.fullRunningID, validityTimeFrame, props)
    assert(tf2.priority==Alarm.SET_HIGH)
    assert(tf2.invert==true)
  }

}
