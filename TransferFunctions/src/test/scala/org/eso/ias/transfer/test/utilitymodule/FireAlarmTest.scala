package org.eso.ias.transfer.test.utilitymodule

import java.util.Properties

import org.eso.ias.asce.exceptions.PropsMisconfiguredException
import org.eso.ias.asce.transfer.{IasIO, IasioInfo}
import org.eso.ias.logging.IASLogger
import org.eso.ias.tranfer.utlitymodule.{StatusWord, UMFireTF}
import org.eso.ias.types._
import org.scalatest.{BeforeAndAfterEach}
import org.scalatest.flatspec.AnyFlatSpec

class FireAlarmTest extends AnyFlatSpec with BeforeAndAfterEach {

  /** The logger */
  val logger = IASLogger.getLogger(this.getClass)

  /**  The ID of the SUPERVISOR where the components runs */
  val supervId = new Identifier("SupervId",IdentifierType.SUPERVISOR,None)

  /**  The ID of the DASU where the components runs */
  val dasuId = new Identifier("DasuId",IdentifierType.DASU,supervId)

  /** The ID of the component running into the DASU */
  val compID = new Identifier("ASCE-ID-ForTest",IdentifierType.ASCE,Option(dasuId))

  /** The ID of the output generated by the component */
  val outId = new Identifier("OutputId",IdentifierType.IASIO, Some(compID))

  /** the IASIO in output */
  val out: IasIO[Alarm] = new IasIO(InOut.asOutput(outId,IASTypes.ALARM))

  /** Output info for the initialize */
  val outputInfo = new IasioInfo(outId.id,IASTypes.ALARM)

  /** The id of input with the UM status word */
  val statusWordId = "InputId"

  /** The Identifier of the ALARM input */
  val swInputIdentifier= new Identifier(statusWordId,IdentifierType.IASIO, Some(compID))

  /** Inputs Info for the initialize */
  val swInputInOut: InOut[String] =  InOut.asInput(swInputIdentifier,IASTypes.STRING)

  /** Inputs Info for the initialize */
  val inputInfos = Set(new IasioInfo(statusWordId,IASTypes.STRING))

  /** The TF to test */
  var fireTransfer: UMFireTF = _

  /** The properties to pass to the TF */
  val props: Properties = new Properties()

  /** The time frame for the validity */
  val validityTimeFrame = 2000

  override def beforeEach() : scala.Unit = {
    props.clear()
  }

  behavior of "The Fire TF"

  it must "NOT set the alarm none or 1 of the 2 bits are set" in {
    fireTransfer = new UMFireTF(compID.id, compID.fullRunningID, validityTimeFrame, props)

    for {
      bitPos <- 0 until StatusWord.monitorPointNames.size
      statusWord = new StatusWordBuilder(List(bitPos))
      input: InOut[String] = swInputInOut.updateValue(Some(statusWord.statusWordString))
      inputs = Map(statusWordId-> new IasIO(input))
      output  = fireTransfer.eval(inputs,out)
    } {
      assert(output.iasType==IASTypes.ALARM,"Unexpected output type: "+output.iasType)
      assert(output.value.isDefined)
      assert(output.value.get.isCleared)
    }
  }

  it must "Set the alarm when the 2 bits are set" in {
    fireTransfer = new UMFireTF(compID.id, compID.fullRunningID, validityTimeFrame, props)

    val statusWord = new StatusWordBuilder(List(0,1,2,5,7))
    val input: InOut[String] = swInputInOut.updateValue(Some(statusWord.statusWordString))
    val output = fireTransfer.eval(Map(statusWordId-> new IasIO(input)),out)
    assert(output.value.isDefined)
    assert(output.value.get.isSet)
    assert(output.value.get.priority==Priority.getDefaultPriority)

    val statusWord2 = new StatusWordBuilder(List(1,2, 3,5,6,7))
    val input2: InOut[String] = swInputInOut.updateValue(Some(statusWord2.statusWordString))
    val output2 = fireTransfer.eval(Map(statusWordId-> new IasIO(input2)),out)
    assert(output2.value.isDefined)
    assert(output2.value.get.isCleared)

  }



}
