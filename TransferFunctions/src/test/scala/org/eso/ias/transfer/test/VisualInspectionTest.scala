package org.eso.ias.transfer.test

import java.util.Properties

import org.eso.ias.asce.transfer.{IasIO, IasioInfo}
import org.eso.ias.logging.IASLogger
import org.eso.ias.tranfer.VisualInspectionAlarm
import org.eso.ias.types._
import org.eso.ias.utils.ISO8601Helper
import org.scalatest.FlatSpec

class VisualInspectionTest extends FlatSpec {
  /**
    * The logger
    */
  val logger = IASLogger.getLogger(this.getClass)

  // The ID of the SUPERVISOR and the DASU where the component runs
  val supervId = new Identifier("SupervId",IdentifierType.SUPERVISOR,None)
  val dasuId = new Identifier("DasuId",IdentifierType.DASU,supervId)

  // The ID of the component running into the DASU
  val compID = new Identifier("ASCE-ID-ForTest",IdentifierType.ASCE,Option(dasuId))

  // The ID of the output generated by the component
  val outId = new Identifier("OutputId",IdentifierType.IASIO, Some(compID))
  // Build the IASIO in output
  val initialOutput: IasIO[Alarm] = new IasIO(InOut.asOutput(outId,IASTypes.ALARM))

  /** The wind speed alarm in input */
  val windSpeedAlarmInput: IasIO[Alarm]= new IasIO(InOut.asInput(
    new Identifier(("WindSpeedAlarm"), IdentifierType.IASIO,compID),
    IASTypes.ALARM))

  /** The visual inspection tstamp in input */
  val visualInspectionInput: IasIO[Alarm]= new IasIO(InOut.asInput(
    new Identifier(("visualInspectionTStamp"), IdentifierType.IASIO,compID),
    IASTypes.STRING))

  /** inputs info for initialization */
  val inputsInfo = Set(new IasioInfo(windSpeedAlarmInput.id,IASTypes.ALARM),new IasioInfo(visualInspectionInput.id,IASTypes.STRING))

  /** output info for initialization */
  val outputInfo = new IasioInfo(initialOutput.id,initialOutput.iasType)

  behavior of "The VisualInspection transfer function"

  it must "propery get the IDs of the IDs of the inputs" in {
    val tf = new VisualInspectionAlarm(compID.id,compID.fullRunningID,1000,new Properties())
    tf.initialize(inputsInfo,outputInfo)

    assert(tf.idOfAlarmInput=="WindSpeedAlarm")
    assert(tf.idOfTstampInput=="visualInspectionTStamp")
  }

  it must "initially produce CLEAR if windspeed not set" in {
    val tf = new VisualInspectionAlarm(compID.id,compID.fullRunningID,1000,new Properties())
    tf.initialize(inputsInfo,outputInfo)

    val windAlarm = windSpeedAlarmInput.updateValue(Alarm.CLEARED)
    val visualTime = visualInspectionInput.updateValue("1900-01-01T00:00:00.000")

    val map = Map("WindSpeedAlarm" -> windAlarm, "visualInspectionTStamp" -> visualTime)

    val out = tf.eval(map,initialOutput)
    assert(out.value.isDefined)
    assert(!out.value.get.asInstanceOf[Alarm].isSet)
  }

  it must "always produce SET if windspeed set" in {
    val tf = new VisualInspectionAlarm(compID.id,compID.fullRunningID,1000,new Properties())
    tf.initialize(inputsInfo,outputInfo)

    val windAlarm = windSpeedAlarmInput.updateValue(Alarm.getSetDefault)
    val visualTime = visualInspectionInput.updateValue("1900-01-01T00:00:00.000")

    val map = Map("WindSpeedAlarm" -> windAlarm, "visualInspectionTStamp" -> visualTime)

    val out = tf.eval(map,initialOutput)
    assert(out.value.isDefined)
    assert(out.value.get.asInstanceOf[Alarm].isSet)

    val updateVI = visualTime.updateValue(ISO8601Helper.getTimestamp(System.currentTimeMillis()))
    val map2 = Map("WindSpeedAlarm" -> windAlarm, "visualInspectionTStamp" -> updateVI)
    val out2 = tf.eval(map2,out)
    assert(out2.value.isDefined)
    assert(out2.value.get.asInstanceOf[Alarm].isSet)
  }

  it must "not clear the output until the VI is not done" in {
    val tf = new VisualInspectionAlarm(compID.id,compID.fullRunningID,1000,new Properties())
    tf.initialize(inputsInfo,outputInfo)

    val windAlarm = windSpeedAlarmInput.updateValue(Alarm.getSetDefault)
    val visualTime = visualInspectionInput.updateValue(ISO8601Helper.getTimestamp(System.currentTimeMillis()))

    val map = Map("WindSpeedAlarm" -> windAlarm, "visualInspectionTStamp" -> visualTime)

    val out = tf.eval(map,initialOutput)
    assert(out.value.isDefined)
    assert(out.value.get.asInstanceOf[Alarm].isSet)

    // Clear the alarm but not the time of the visual inspectio:
    // the output remains SET
    val clearedWindSpeed = windAlarm.updateValue(Alarm.CLEARED)
    val map2 = Map("WindSpeedAlarm" -> clearedWindSpeed, "visualInspectionTStamp" -> visualTime)
    val out2 = tf.eval(map2,out)
    assert(out2.value.isDefined)
    assert(out2.value.get.asInstanceOf[Alarm].isSet)

    // Set wind alarm again
    val resetWindSpeed = clearedWindSpeed.updateValue(Alarm.getSetDefault)
    val map3 = Map("WindSpeedAlarm" -> resetWindSpeed, "visualInspectionTStamp" -> visualTime)
    val out3 = tf.eval(map3,out)
    assert(out3.value.isDefined)
    assert(out3.value.get.asInstanceOf[Alarm].isSet)

    // Clear the wind alarm
    val reclearedWindSpeed = resetWindSpeed.updateValue(Alarm.CLEARED)
    val map4 = Map("WindSpeedAlarm" -> reclearedWindSpeed, "visualInspectionTStamp" -> visualTime)
    val out4 = tf.eval(map4,out)
    assert(out4.value.isDefined)
    assert(out4.value.get.asInstanceOf[Alarm].isSet)

    // Finally do the visual inspection: output must be cleared
    Thread.sleep(100)
    val viDone = visualTime.updateValue(ISO8601Helper.getTimestamp(System.currentTimeMillis()))
    val map5 = Map("WindSpeedAlarm" -> reclearedWindSpeed, "visualInspectionTStamp" -> viDone)
    val out5 = tf.eval(map5,out)
    assert(out5.value.isDefined)
    assert(!out5.value.get.asInstanceOf[Alarm].isSet)
  }
}
