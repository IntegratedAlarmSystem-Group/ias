from subprocess import call
import os
import sys
import datetime

from IASTools.CommonDefs import CommonDefs
from IASApiDocs.DocGenerator import DocGenerator

"""
This python script generates documentation for IAS java sources
by delegating to IasJavadocBuilder class that in turn runs
javadoc. 

The script takes the following parameters:
   * src folder:  the folder containing java sources (usually ias as checked out from the repository)
   * dest folder: the folder where javadoc put the HTMLs
   
I wrote this script for the ALMA Common Software times ago:
this is a customized version for the Integrated Alarm System.

@author: acaproni
"""


class JavadocBuilder(DocGenerator):
    """
    Objects from this class generates the javadoc documentation of IAS sources
    """
    
    def __init__(self,srcFolder,dstFolder,includeTestFolder=False,outFile=sys.stdout):
        """ 
        Constructor
        @param srcFolder: the folder with java sources to generate their documentation
        @param dstFolder: destination folder for javadocs  
        @param includeTestFolder: True if the class must generate documentation for the java
                sources in test folders (defaults to False)
        @param outFile: the file where the output generated by calling javadoc must be sent
        """
        self.includeTestFolder=includeTestFolder
        super(JavadocBuilder, self).__init__(srcFolder,dstFolder,outFile)
            
    def buildJavadocs(self):
        """
        Build the javadocs by reading java sources from the source folder, including
        those in test is needed
        Javadocs will be written in the destination folder.
        
        Generation of jaavadocs is ddelegatred to Oracle' javadoc executable
        
        @return: the code returned by calling javadoc
        """
        # Look for src (and if it is the case test) folders containing java sources
        folders = self.getSrcPaths(self.srcFolder, self.includeTestFolder,"java",".java")
        
        roots = self.getJavaPackagesRoot(folders)
        
        # Run javadoc
        cmd=self.buildJavadocCmd(self.dstFolder,folders,roots)
        
        return call(cmd,stdout=self.outFile,stderr=self.outFile)
        
    def getJavaPackagesRoot(self,srcFolders):
        """
        Get the root folders of the java packages in the passed list of folders
        @param srcFolders: the list of folders containg java sources
        @return:  the root of java packages (something like, com, org,...)
        """
        ret = []
        for folder in srcFolders:
            directories = next(os.walk(folder))[1]
            for directory in directories:
                if self.containsSources(folder+os.sep+directory,".java"):
                    if ret.count(directory)==0:
                        ret.append(directory)
        return ret

    def buildJavadocCmd(self,dest,srcFolders,pkgs):
        '''
        Build the command to invoke javadoc with subprocess.call.
        javadoc must be invoked with a command line like
        javadoc -d ./html -splitIndex -windowtitle 'IAS 1.0' -J-Xmx180m -sourcepath ./src -subpackages org:com
        
        @param dest The destination folder where javadoc creates html
        @param srcFolders The folders containing java sources
        @param pkgs The package roots (org, com, cern..)
        @return: a list of parameteres to invoke javadoc 
        '''
        sources = ''
        for folder in srcFolders:
            sources = sources + folder+os.path.pathsep
        
        packages = ''
        for pkg in pkgs:
            packages = packages + pkg+os.path.pathsep  
        
        classPath=CommonDefs.buildClasspath()

        ret=[]
        ret.append("javadoc")
        ret.append("-d")
        ret.append(dest)
        ret.append('-splitIndex')
        ret.append('-windowtitle')
        ret.append('IAS release')
        ret.append('-J-Xmx250m')
        ret.append('-sourcepath')
        ret.append(sources)
        ret.append('-subpackages')
        ret.append(packages)
        ret.append("-classpath")
        ret.append(classPath)
        ret.append("-quiet") # Suppress non-warning non-error messages
        ret.append("-author") #Adds the author to generated docs
        ret.append("-doctitle")
        ret.append("IAS API documentation")
        ret.append("-header")
        ret.append('<EM>IAS release</EM>')
        ret.append("-footer")
        ret.append('<EM>Generated at '+str(datetime.date.today())+'</EM>')
        ret.append("-charset")
        ret.append("iso-8859-15")
        return ret
    
#
# ___oOo___
