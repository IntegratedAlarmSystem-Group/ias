'''
API python documentation builder.

Created on Jul 7, 2017

@author: acaproni
'''

import sys
import os
import shutil
from subprocess import call
from IASApiDocs.DocGenerator import DocGenerator

class PydocBuilder(DocGenerator):
    '''
    Builds python API documentation, delegating to pydoc
    '''


    def __init__(self,srcFolder,dstFolder,includeTestFolder=False,outFile=sys.stdout):
        """ 
        Constructor
        @param srcFolder: the folder with python sources to generate their documentation
        @param dstFolder: destination folder for pydocs  
        @param includeTestFolder: True if the class must generate documentation for the python
                sources in test folders (defaults to False)
        @param outFile: the file where the output generated by calling pydoc must be sent
        """
        self.includeTestFolder=includeTestFolder
        super(PydocBuilder, self).__init__(srcFolder,dstFolder,outFile)
        
    def getPythonFilesInFolder(self,folder):
        """
        Get the python sources in the passed folder
        
        Note that these files are python scripts that do not belong
        to a python module
        """
        ret = []
        files= os.listdir(folder)
        for f in files:
            if f.endswith(".py"):
                ret.append(f)
        
        return ret 
        
    def buildPydocs(self):
        """
        Build the pydocs 
        
        Generation of pydocs is delegated to pydoc executable
        
        @return: the code returned by calling pydoc
        """
        
        folders = self.getSrcPaths(self.srcFolder, False,"python",".py")
        
        print "Folders",folders
        print "SourceFolder",self.srcFolder
                   
        for folder in folders:
            print "Generating pydoc in",folder
            
            oldWD = os.getcwd()
            print "Changing folder to",folder
            os.chdir(folder)
            cmd =["pydoc"]
            cmd.append("-w")
            cmd.append("./")
            ret = call(cmd,stdout=self.outFile,stderr=self.outFile)
            
            print "Moving htmls to",self.dstFolder
            files = os.listdir(".")
            for f in files:
                if (f.endswith(".html")):
                    shutil.move(f, self.dstFolder)
            print "Changing folder back to",oldWD
            os.chdir(oldWD)
        
        return ret
        