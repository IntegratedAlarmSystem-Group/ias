'''
Created on Jul 7, 2017

Build scala API documentation delegating to IasScaladocBuilder
that in turn run scaladoc

@author: acaproni
'''

import sys, os, shutil
from subprocess import call
from IASApiDocs.DocGenerator import DocGenerator
from IASTools.CommonDefs import CommonDefs
from IASLogging.logConf import Log

class ScaladocBuilder(DocGenerator):
    '''
    Build scala API documentation
    '''
    
    def __init__(self,src,dest,outFile=sys.stdout):
        '''
        Constructor
        
        @param src: source folder to get scala files
        @param dest: destination folder to write HTMLs into
        @param outFile: the file where the output generated by calling javadoc must be sent
        '''
        super(ScaladocBuilder, self).__init__(src,dest,outFile)
        self.logger=Log.getLogger(__file__)

        # The program to generate scala documentation
        self.scaladoc_prg = "scaladoc"

        if not self.checkScaladocPrg():
            self.logger.error("%s not installed or not in the PATH", self.scaladoc_prg)
            raise ValueError(f"Program {self.scaladoc_prg} NOT found")

    def checkScaladocPrg(self) -> bool:
        """
        Check if scaladoc is in the path
        """
        exists = shutil.which(self.scaladoc_prg)
        return exists is not None
        
    def getScalaSources(self,folder):
        '''
        Recursively scan the source folder to get scala source files
        
        @param folder: the folder to scan for source files
        @return:  The liost of source files found in th efolder and its subfolders
        '''
        self.logger.debug("Getting scala sources")
        srcs = []
        for root, subdirs, files in os.walk(folder):
            for file in files:
                if file.endswith(".tasty"):
                    srcs.append(os.path.join(root,file))
        self.logger.info("Found %d scala source files to document", len(srcs))
        return srcs
    
    def buildScaladocs(self):
        '''
        Build the scaladoc in the destination folder
        
        @return: the code returned by calling scaladoc
        '''
        self.sources = self.getScalaSources(self.srcFolder)
        self.classpath = CommonDefs.buildClasspath()
        cmd=[]
        cmd.append(self.scaladoc_prg)
        cmd.append("-feature")
        cmd.append("-d")
        cmd.append(self.dstFolder)
        cmd.append("-classpath")
        cmd.append(self.classpath)
        for src in self.sources:
            cmd.append(src)
            
        return call(cmd,stdout=self.outFile,stderr=self.outFile)
