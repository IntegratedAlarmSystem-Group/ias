top = '.'
try:
    out
except NameError:
    # out not defined
    out = 'build'

import os
from waflib import Logs

def options(conf):
    pass

def configure(conf):
    Logs.info("Tools: Configuring...")

def makeInstall(ctx):
    from IasWafBuildTools.Installer import Installer
    installer = Installer(ctx)
    ctx.add_to_group(installer)

def makeBuild(bld, env):
    '''
    Make the build

    :param bld: Waf build context
    :param env: Waf environment
    :return:
    '''
    Logs.info("Building %s", bld.path.abspath())

    #
    # get jars from ZIP
    #
    zipFileName="spring-framework-4.3.9.RELEASE-dist.zip"

    jarsInZip = [
        "spring-core-4.3.9.RELEASE.jar",
        "spring-context-4.3.9.RELEASE.jar",
        "spring-beans-4.3.9.RELEASE.jar",
        "spring-aop-4.3.9.RELEASE.jar",
        "spring-expression-4.3.9.RELEASE.jar"
    ]

    from IasWafBuildTools.JarTasks import jarsFromZip
    jarsFromZipTask = jarsFromZip(zipFileName, jarsInZip, env)
    bld.add_to_group(jarsFromZipTask)

    #
    # get Jars from extTools
    #
    from IasWafBuildTools.JarTasks import getJarsFromExtTools
    copyExtJarTask = getJarsFromExtTools(env)
    bld.add_to_group(copyExtJarTask)

    #
    # Get jars from tar
    #
    tarFileName="commons-cli-1.4-bin.tar.gz"
    jars = [ "commons-cli-1.4.jar" ]
    from IasWafBuildTools.JarTasks import jarsFromTar
    getJarsFromTarTask = jarsFromTar(tarFileName, jars, env)
    bld.add_to_group(getJarsFromTarTask)

    #
    # Again get jar from tar
    #
    tarFileName2="logback-1.2.3.tar.gz"
    jars = ["logback-core-1.2.3.jar", "logback-classic-1.2.3.jar"]
    from IasWafBuildTools.JarTasks import jarsFromTar
    getJarsFromTarTask2 = jarsFromTar(tarFileName2, jars, env)
    getJarsFromTarTask2.set_run_after(getJarsFromTarTask)
    bld.add_to_group(getJarsFromTarTask2)

    #
    # Python modules
    #
    from IasWafBuildTools.PythonBuilder import buildPythonModules
    bldPyMods = buildPythonModules(env)
    bld.add_to_group(bldPyMods)

    #
    # Config files
    #
    from IasWafBuildTools.FileTasks import CopyTask
    copyConfigFiles = CopyTask(env, env.CONFIGSRCFOLDER, env.CONFIGDSTFOLDER)
    copyConfigFiles.color = 'CYAN'
    bld.add_to_group(copyConfigFiles)

    #
    # Shell scripts
    #
    bldShScripts = CopyTask(
        env,
        env.SRCMAINFOLDER,
        env.BLDBINFOLDER,
        remove_extension=True,
        make_executable=True,
        file_extension=".sh"
    )
    bldShScripts.color='YELLOW'
    bld.add_to_group(bldShScripts)

    #
    # Python scripts
    #
    bldPyScripts = CopyTask(
        env,
        env.PYSRCFOLDER,
        env.BLDBINFOLDER,
        remove_extension=True,
        make_executable=True,
        file_extension=".py"
    )
    bldPyScripts.color = 'GREY'
    bld.add_to_group(bldPyScripts)

def build(bld):
    bld.load('IasWafBuildTools', tooldir='../WafBuildTools/src/main/python/')
    bld.add_group("Tools")
    from IasWafBuildTools.Utils import set_env
    env = bld.env.derive()
    set_env(env, bld.path, bld.bldnode)
    env.PREFIX = os.environ['IAS_ROOT']

    if bld.cmd == 'build':
        makeBuild(bld, env)
    elif bld.cmd == 'install':
        makeInstall(bld)
    elif bld.cmd == 'clean':
        Logs.info("Cleaning %s", bld.bldnode.abspath())
        bld(rule='rm -rf build/*', always=True)
