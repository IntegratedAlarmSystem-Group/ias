top = '.'
out = 'build'

from pathlib import Path

def options(conf):
    pass

def configure(conf):
    pass

def clean():
    pass

def build(bld):
    bld.load('IasWafBuildTools', tooldir='WafBuildTools/src/main/python/')
    from IasWafBuildTools.Utils import set_env
    bld.bldnode=bld.path.make_node('build')
    set_env(bld.env,bld.path,bld.bldnode)

    print("Building",bld.path.abspath())

    print("Root abspath",bld.root.abspath())
    print("bld.path contents %r" % bld.path.children)
    print("bld.path parent   %r" % bld.path.parent.abspath())
    print("bld.root parent   %r" % bld.root.parent)
    print("Build node",bld.bldnode)



    srcExtTools=bld.path.find_node('extTools')
    print("srcExtTools",srcExtTools.abspath())

    dstExtTools=bld.bldnode.make_node('extTools')
    print("dstExtTools",dstExtTools.abspath())

    #
    # get jars from ZIP
    #
    spring_release = "4.3.9"
    zipFileName="spring-framework-{}.RELEASE-dist.zip".format(spring_release)

    jarsInZip = [
        dstExtTools.find_or_declare("spring-core-{}.RELEASE.jar".format(spring_release)),
        dstExtTools.find_or_declare("spring-context-{}.RELEASE.jar".format(spring_release)),
        dstExtTools.find_or_declare("spring-beans-{}.RELEASE.jar".format(spring_release)),
        dstExtTools.find_or_declare("spring-aop-{}.RELEASE.jar".format(spring_release)),
        dstExtTools.find_or_declare("spring-expression-{}.RELEASE.jar".format(spring_release))
    ]

    print("jars to get from ZIP",jarsInZip)


    from IasWafBuildTools.JarTasks import getJarsFromZip

    jarsFromZipTask = getJarsFromZip(env=bld.env)
    jarsFromZipTask.color='YELLOW'
    jarsFromZipTask.set_inputs(srcExtTools.find_node(zipFileName))
    jarsFromZipTask.set_outputs(jarsInZip)
    bld.add_to_group(jarsFromZipTask)

    #
    # get Jars from extTools
    #
    jarsInExtTools = srcExtTools.ant_glob("**/*.jar")
    destJars = []
    for jar in jarsInExtTools:
        p = Path(jar.abspath())
        destJars.append(dstExtTools.find_or_declare(p.name))
    print("Input jars ",jarsInExtTools,len(jarsInExtTools))
    print("Output jars",destJars,len(destJars))

    from IasWafBuildTools.JarTasks import copyFiles
    copyFilesTask = copyFiles(env=bld.env)
    copyFilesTask.set_inputs(jarsInExtTools)
    copyFilesTask.set_outputs(destJars)
    copyFilesTask.color='BLUE'
    bld.add_to_group(copyFilesTask)

    #
    # Get jar from tar
    #
    tarFileName="commons-cli-1.4-bin.tar.gz"
    tarFileNode = srcExtTools.find_node(tarFileName)

    from IasWafBuildTools.JarTasks import getJarsFromTar
    getJarsFromTarTask = getJarsFromTar(env=bld.env)
    getJarsFromTarTask.set_inputs(tarFileNode)
    getJarsFromTarTask.set_outputs(dstExtTools.find_or_declare("commons-cli-1.4.jar"))
    getJarsFromTarTask.color='PINK'
    bld.add_to_group(getJarsFromTarTask)

    from IasWafBuildTools.PythonBuilder import BuildPythonScripts
    bldPyScripts = BuildPythonScripts(env=bld.env)
    bldPyScripts.getPySources()
    bldPyScripts.color='GREY'
    bld.add_to_group(bldPyScripts)

    print("Building of",bld.path.abspath(),"done.")

