package org.eso.ias.types;

import java.util.Objects;
import java.util.Optional;

/**
 * <code>Alarm</code> represents an alarm generated by a remote monitored system.
 * <P>
 * An alarm has a state of set/clear including acknowledgement and
 * a priority
 * <P>
 * Alarm is immutable
 * 
 * @author acaproni
 *
 */
public class Alarm {

	/** The state of the alarm */
	public final AlarmState alarmState;

	/** The priority of the alarm */
	public final Priority priority;

	/**
	 * Constructor for an alarm that is cleared and have default priority
	 */
	public Alarm() {
		this(AlarmState.SET_UNACK, Priority.getDefaultPriority());
	}

	@Override
	public int hashCode() {
		return Objects.hash(alarmState, priority);
	}

	@Override
	public boolean equals(Object o) {
		if (o == this)
			return true;
		if (!(o instanceof Alarm))
			return false;
		Alarm other = (Alarm)o;
		return this.alarmState == other.alarmState && this.priority==other.priority;
	}

	/**
	 * Constructor 
	 * 
	 * @param state the state of the alarm
	 * @param priority the priority of the alarm
	 */
	public Alarm(AlarmState state, Priority priority) {
		this.alarmState=state;
		this.priority=priority;
	}

	public Alarm ack() {
		AlarmState as = alarmState.ack();
		if (as==alarmState) {
			return this;
		} else {
			return new Alarm(as, priority);
		}
	}
	
	/**
	 * Return an alarm of an increased priority if it exists,
	 * otherwise return the same alarm.
	 * 
	 * Increasing the priority of a {@link #CLEARED} 
	 * alarm is not allowed and the method throws an exception
	 * 
	 * @return the alarm with increased priority
	 */
	public Alarm increasePriority() {
		return new Alarm(alarmState, priority.getHigherPrio());
	}
	
	/**
	 * Return an alarm of a lowered priority if it exists,
	 * otherwise return the same alarm.
	 * 
	 * Lowering the priority of a {@link #CLEARED} 
	 * alarm is not allowed and the method throws an exception
	 * 
	 * @return the alarm with increased priority
	 */
	public Alarm lowerPriority() {
		return new Alarm(alarmState, priority.getLowerPrio());
	}

	@Override
	public String toString() {
		return alarmState.toString()+":"+priority.toString();
	}

	/**
	 * Build an alarm from the passed string
	 *
	 * @param value The string encoding the alarm
	 * @return the alarm buit from the string
	 */
	public static Alarm valueOf(String value) {
		System.out.println("ALARM STRING="+value);
		throw new UnsupportedOperationException("Not yet implemented");
	}
	
	
}
