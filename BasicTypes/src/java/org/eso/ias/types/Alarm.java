package org.eso.ias.types;

import java.util.Optional;

/**
 * <code>Alarm</code> represents an alarm generated by a remote monitored system.
 * <P>
 * An alarm can be cleared orSET with one of the possible 4 priorities.
 * 
 * @author acaproni
 *
 */
public enum Alarm {
	/**
	 *  Critical alarm set
	 */
	SET_CRITICAL(4),
	
	/**
	 *  HIGH alarm set
	 */
	SET_HIGH(3),
	
	/**
	 * Medium alarm set
	 */
	SET_MEDIUM(2),
	
	/**
	 *  Low priority alarm set
	 */
	SET_LOW(1),
	
	/**
	 *  Alarm clear or unset
	 */
	CLEARED(null);
	
	
	/**
	 * The priority level of an alarm (<code>&gt;0</code>).
	 * 
	 * It is defined only when the alarm is not cleared.
	 */
	public final Optional<Integer> priorityLevel; 
	
	/**
	 * Constructor
	 * 
	 * @param intValue The representation of the enumerated as integer
	 */
	private Alarm(Integer intValue) {
		priorityLevel = Optional.ofNullable(intValue);
		priorityLevel.ifPresent(priority -> {
			assert(priority>0);
		});
	}
	
	/**
	 * 
	 * @return <code>true</code> if the alarm is set;
	 *         <code>false</code> otherwise
	 */
	public final boolean isSet() {
		return priorityLevel.isPresent();
	}
	
	/**
	 * @return The default alarm set
	 */
	public static Alarm getSetDefault() {
		return SET_MEDIUM;
	}
	
	/**
	 * 
	 * @return the alarm cleared
	 */
	public static Alarm cleared() {
		return CLEARED;
	}
	
	/**
	 * 
	 * @param n the integer representation of an alarm
	 * @return the alarm of the given integer representation
	 */
	public static Alarm fromPriority(int n) {
		for (Alarm al: Alarm.values()) {
			if (!al.priorityLevel.isPresent()) {
				continue;
			}
			if (al.priorityLevel.get()==n) {
					return al;
				}
			}
		throw new IllegalArgumentException("Invalid alarm priority "+n);
	}
	
	/**
	 * Return an alarm of an increased priority if it exists,
	 * otherwise return the same alarm.
	 * 
	 * Increasing the priority of a {@link #CLEARED} 
	 * alarm is not allowed and the method throws an exception
	 * 
	 * @return the alarm with increased priority
	 */
	public Alarm increasePriority() {
		if (!priorityLevel.isPresent()) {
			throw new IllegalStateException("Cannot increase the priority of an alarm that is not set");
		}
		if (this==getMaxPriorityAlarm()) {
			return this;
		} else {
			return fromPriority(priorityLevel.get()+1);
		}
	}
	
	/**
	 * Return an alarm of a lowered priority if it exists,
	 * otherwise return the same alarm.
	 * 
	 * Lowering the priority of a {@link #CLEARED} 
	 * alarm is not allowed and the method throws an exception
	 * 
	 * @return the alarm with increased priority
	 */
	public Alarm lowerPriority() {
		if (!priorityLevel.isPresent()) {
			throw new IllegalStateException("Cannot lower the priority of an alarm that is not set");
		}
		if (this==getMinPriorityAlarm()) {
			return this;
		} else {
			return fromPriority(priorityLevel.get()-1);
		}
	}
	
	/**
	 * @return the alarm with the lowest priority
	 */
	public static Alarm getMinPriorityAlarm() {
		return SET_LOW;
	}
	
	/**
	 * @return the alarm with the highest priority
	 */
	public static Alarm getMaxPriorityAlarm() {
		return SET_CRITICAL;
	}
}
