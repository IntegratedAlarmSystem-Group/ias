package org.eso.ias.component.test

import org.eso.ias.prototype.input.Identifier
import org.eso.ias.prototype.input.InOut
import scala.collection.mutable.{Map => MutableMap }
import org.eso.ias.plugin.OperationalMode
import org.eso.ias.prototype.input.Validity
import org.eso.ias.prototype.input.java.IASTypes
import org.eso.ias.prototype.input.java.IdentifierType
import org.eso.ias.prototype.input.java.IASValue

/**
 * A common helper class to build data structures for testing
 *
 * @param dasuId: The ID of the DASU where the ASCE runs (to build the iD)
 * @param asceId: The ID of the ASCE
 * @param outputId: the ID of the output HIO
 * @param outputType: the type of the output
 * @param inputTypes: the type of the inputs used to generate the inputs
 */
class CommonCompBuilder(
    dasuId: String,
    asceId: String,
    outputId: String,
    outputType: IASTypes,
    inputTypes: Set[IASTypes]) {
  require(Option[String](dasuId).isDefined)
  require(Option[String](asceId).isDefined)
  require(Option[String](outputId).isDefined)
  require(Option[IASTypes](outputType).isDefined)
  require(Option[Set[IASTypes]](inputTypes).isDefined)

  // The thread factory used by the setting to async
  // initialize and shutdown the TF objects
  val threadFactory = new TestThreadFactory()
  
  // The ID of the DASU where the components runs
  val dasId = new Identifier(dasuId,IdentifierType.DASU,None)

  // The ID of the component running into the DASU
  val compID = new Identifier(asceId,IdentifierType.ASCE,Option(dasId))

  // The refresh rate of the component
  val mpRefreshRate = InOut.MinRefreshRate + 500

  // The ID of the output generated by the component
  val outId = new Identifier(outputId,IdentifierType.IASIO, Some(compID))
  // Build the HIO in output
  val output = InOut(
    outId,
    mpRefreshRate,
    outputType)

  // The Map of IASValues for updating the inputs to the ASCE
  val inputsMPs: Set[InOut[_]]  = inputTypes.zip(1 to inputTypes.size).map( a => {
     InOut(
         new Identifier(("INPUT-HIO-ID#"+a._2), IdentifierType.IASIO,compID), 
         mpRefreshRate, 
         a._1)
  })
     
  val requiredInputIDs: Set[String] = inputsMPs.map(_.id.id)
  
  /**
   * Auxiliary constructor to help instantiating a component
   * with the given number of inputs of the same type
   * 
   * @param dasuId: The ID of the DASU where the ASCE runs (to build the iD)
   * @param asceId: The ID of the ASCE
   * @param outputId: the ID of the output HIO
   * @param outputType: the type of the output
   * @param numOfInputs: the number of inputs to generate
   * @param hioType: the type of the inputs
   */
  def this(
    dasuId: String,
    asceId: String,
    outputId: String,
    outputType: IASTypes,
    numOfInputs: Int,
    hioType: IASTypes) {
    this(dasuId,asceId,outputId, outputType,List.fill(numOfInputs)(hioType).toSet)
  }
}
