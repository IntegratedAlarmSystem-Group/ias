package org.eso.ias.component.test

import org.scalatest.FlatSpec
import org.eso.ias.prototype.transfer.impls.MultiplicityTF
import java.util.Properties
import org.eso.ias.prototype.compele.ComputingElement
import org.eso.ias.prototype.input.java.AlarmSample
import org.eso.ias.prototype.transfer.ScalaTransfer
import org.eso.ias.prototype.transfer.TransferFunctionLanguage
import org.eso.ias.prototype.transfer.TransferFunctionSetting
import org.eso.ias.prototype.input.Identifier
import org.eso.ias.prototype.input.java.IdentifierType
import org.eso.ias.prototype.input.InOut
import org.eso.ias.prototype.input.java.IASTypes

/**
 * Test the multiplicity transfer function
 */
class TestMultiplicityTF extends FlatSpec {
  
  val props = new Properties()
  props.put(MultiplicityTF.ThresholdPropName,"3")
  
  val threadFactory = new TestThreadFactory()
    
    // The TF executor to test
    val scalaMultuiplicityTF = new TransferFunctionSetting(
        "org.eso.ias.prototype.transfer.impls.MultiplicityTF",
        TransferFunctionLanguage.scala,
        threadFactory)
  
  /** The ID of the SUPERVISOR where the components runs */
  val supervId = new Identifier("SUPERV-ID",IdentifierType.SUPERVISOR,None)
  
  /** The ID of the DASU where the components runs */
  val dasId = new Identifier("DASU-ID",IdentifierType.DASU,supervId)

  /** The ID of the component running into the DASU */
  val compID = new Identifier("ASCE-ID",IdentifierType.ASCE,Option(dasId))
  
  /** The ID of the output generated by the component */
  val outId = new Identifier("MultiAlarm-ID",IdentifierType.IASIO, Some(compID))
  
  /** The output of the ASCE */
  val output: InOut[AlarmSample] = InOut(
    outId,
    1000,
    IASTypes.ALARM)
    
  /** The Map of IASValues for updating the inputs to the ASCE */
  val inputsMPs: Set[InOut[_]]  = {
    val v = for (i <- 1 to 5) yield {
    InOut(
         new Identifier(("INPUT-HIO-ID#"+i), IdentifierType.IASIO,compID), 
         500, 
         IASTypes.ALARM)
    }
    v.toSet
  }
  
  val scalaComp: ComputingElement[AlarmSample] = new ComputingElement[AlarmSample](
       compID,
       output,
       inputsMPs,
       scalaMultuiplicityTF,
       props) with ScalaTransfer[AlarmSample]
  
  behavior of "The scala MultiplicityTF executor"
  
  it must "Correctly load, init and shutdown the TF executor" in { 
    assert(!scalaMultuiplicityTF.initialized)
    assert(!scalaMultuiplicityTF.isShutDown)
    scalaMultuiplicityTF.initialize("ASCE-MinMaxTF-ID", "ASCE-running-ID", new Properties())
    Thread.sleep(500)
    assert(scalaMultuiplicityTF.initialized)
    assert(!scalaMultuiplicityTF.isShutDown)
    scalaMultuiplicityTF.shutdown()
    Thread.sleep(500)
    assert(scalaMultuiplicityTF.initialized)
    assert(scalaMultuiplicityTF.isShutDown)
  }
}