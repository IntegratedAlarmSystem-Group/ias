import os
from waflib import Logs

top = '.'
try:
    out
except NameError:
    # out not defined
    out = 'build'

def options(conf):
    pass

def configure(conf):
    Logs.info("CompElement: Configuring...")

def makeInstall(ctx):
    from IasWafBuildTools.Installer import Installer
    installer = Installer(ctx)
    ctx.add_to_group(installer)

def makeBuild(bld, env):
    '''
    Make the build

    :param bld: The waf build context
    :param env: The Waf environment
    :return:
    '''
    Logs.info("Building %s", bld.path.abspath())

    #
    # Python modules
    #
    from IasWafBuildTools.PythonBuilder import buildPythonModules
    bldPyMods = buildPythonModules(env)
    bld.add_to_group(bldPyMods)

    #
    # get Jars from extTools
    #
    from IasWafBuildTools.JarTasks import getJarsFromExtTools
    copyExtJarTask = getJarsFromExtTools(env)
    bld.add_to_group(copyExtJarTask)

    #
    # Scala sources
    #
    from IasWafBuildTools.ScalaBuilder import buildScala
    scalaBuilder = buildScala(env)
    scalaBuilder.set_run_after(copyExtJarTask)
    bld.add_to_group(scalaBuilder)

    #
    # Java sources
    #
    from IasWafBuildTools.JavaBuilder import buildJava
    javaBuilder = buildJava(env)
    javaBuilder.set_run_after(scalaBuilder)
    bld.add_to_group(javaBuilder)

    #
    # Build the jar
    #
    from IasWafBuildTools.JarTasks import buildJar
    jar_builder = buildJar(env, "iasAsce.jar")
    jar_builder.set_run_after(javaBuilder)
    bld.add_to_group(jar_builder)

def build(bld):
    bld.load('IasWafBuildTools', tooldir='../WafBuildTools/src/main/python/')
    bld.add_group("CompElement")
    from IasWafBuildTools.Utils import set_env
    env = bld.env.derive()
    set_env(env, bld.path, bld.bldnode)
    env.PREFIX = os.environ['IAS_ROOT']

    if bld.cmd == 'build':
        makeBuild(bld, env)
    elif bld.cmd == 'install':
        makeInstall(bld)
    elif bld.cmd == 'clean':
        bld(rule='rm -rf build/*', always=True)
