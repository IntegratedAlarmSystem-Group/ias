package org.eso.ias.test.times;

import org.eso.ias.heartbeat.HbProducer;
import org.eso.ias.heartbeat.publisher.HbKafkaProducer;
import org.eso.ias.heartbeat.serializer.HbJsonSerializer;
import org.eso.ias.plugin.Plugin;
import org.eso.ias.plugin.PluginException;
import org.eso.ias.plugin.config.Value;
import org.eso.ias.plugin.publisher.MonitorPointSender;
import org.eso.ias.plugin.publisher.PublisherException;
import org.eso.ias.plugin.publisher.impl.KafkaPublisher;
import org.eso.ias.types.Identifier;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

/**
 * A plugin that produces n monitor points of type LONG.
 *
 * The purpose of this plugin is mostly to load the system with
 * a high number of monitor points.
 * The ID of each monitor point ha s a defined pattern and built by the
 * {@link #buildMPointId(int)} static method that use templates.
 *
 * The configuration of the plugin is generated by the plugin itself so a
 * configuration file is not needed to run this plugin. The drawback is that
 * all the values are hardcoded in this source file and to change
 * the setting there is the need to rebuild the plugin.
 *
 * A thread publishes the monitor points at definite time intervals assigning
 * a random value to each of them. To better simulate the reality, not all the values
 * of the monitor points are chaned at each iteration
 *
 * The number of monitor points to publish is customizable by setting the
 * #NUM_OF_MPOINTS_PROPNAME java property.
 */
public class ManyIasiosPlugin extends Plugin implements Runnable {

    /**
     * The logger
     */
    private static final Logger logger = LoggerFactory.getLogger(ManyIasiosPlugin.class);

    /**
     * Th ename of the property to customize the number of deiiferent monitor ponts
     * sent by the pklugin
     */
    public static final String NUM_OF_MPOINTS_PROPNAME = "org.eso.ias.plugin.multi.points";

    /**
     * The number of monitor points generated by the plugin
     * is reead by th epassed propery or set to a default value
     */
    private static final int numOfMPoints = Integer.getInteger(NUM_OF_MPOINTS_PROPNAME,5000);

    /**
     * Frequency of the HB
     */
    private static final int hbFrequency = 5;

    /**
     * The monitored system
     */
    private static final String monitoredSys = "SimulatedMonSys";

    /**
     * The Id of the plugin
     */
    private static final String pluginId = "ManyIasiosPlugin";

    /**
     * BSDB URL
     */
    private static final String sinkServer = "127.0.0.1";

    /**
     * BSDB port
     */
    private static final int sinkPort = 9092;

    /**
     * Auto-send time interval
     */
    private static final int refreshRate = 3;

    /**
     * The refresh rate ot the monitor points
     */
    private static final int mpointRefreshRate = 500;

    /**
     * The base of the ID of the n monitor points generated by the plugin.
     * <p>
     * Each ID of the MPs is templated and built by {@link #buildMPointId(int)}
     */
    private static final String mpBaseId = "MP-ID";

    /**
     * Random number generator
     */
    private final Random random = new Random(System.currentTimeMillis());

    /**
     *  The thread to update the monitor points
     */
    private Thread updateThread=null;

    /**
     * Records the last submitted value of each monitor point
     */
    private Map<String,Long> lastSubmittedValue = new HashMap<>();

    /**
     * Build the IDX of the monitor point instance idx
     *
     * @param idx The instance of the monitor point
     * @return the id of the monitor point
     */
    private static String buildMPointId(int idx) {
        String prefix=Identifier.templatedIdPrefix();
        String suffix=Identifier.templateSuffix();
        return mpBaseId + prefix+idx+suffix;
    }


    @Override
    public void run() {
        logger.info("Updater thread started");
        while (true) {
            for (int idx=0; idx<numOfMPoints; idx++) {
                String id = buildMPointId(idx);

                // Randomly decides if it is the case to change the value of
                // the monitor point
                boolean toBeChanged = random.nextBoolean();

                long value;
                if (toBeChanged || !lastSubmittedValue.containsKey(id)) {
                    value =  random.nextLong();
                    lastSubmittedValue.put(id,value);
                } else {
                    value=lastSubmittedValue.get(id);
                }

                try {
                    this.updateMonitorPointValue(id,value);
                } catch (PluginException pe) {
                    logger.warn("Exception updating {} with value {}",id,value);
                }
            }

            try {
                Thread.sleep(mpointRefreshRate/2);
            } catch (InterruptedException ie) {
                logger.warn("Thread interrupted");
                break;
            }
        }
        logger.info("Thread terminated");

    }

    /**
     * Generate the values with the passed index
     *
     * @param points the number of monitor points
     * @return the configuration of the MP
     */
    private static Collection<Value> generateValue(int points) {
        if (points <= 0) {
            throw new IllegalArgumentException("Invalid number of mpoints: must be >=1");
        }

        Collection<Value> ret = new ArrayList<>();

        for (int idx = 0; idx < points; idx++) {
            String id = buildMPointId(idx);

            Value value = new Value();
            value.setId(id);
            value.setRefreshTime(mpointRefreshRate);
            ret.add(value);
        }

        return ret;
    }

    /**
     * The main
     *
     * @param args The name of the config file
     */
    public static void main(String[] args) {


        KafkaPublisher publisher = new KafkaPublisher(
                pluginId,
                monitoredSys,
                sinkServer,
                sinkPort,
                Plugin.getScheduledExecutorService());

        logger.info("kafka publisher created");

        // Instantiate the plugin
        ManyIasiosPlugin plugin = new ManyIasiosPlugin(
                generateValue(numOfMPoints),
                publisher,
                new HbKafkaProducer(pluginId+"-HB", new HbJsonSerializer()));
        logger.info("Plugin {} built", pluginId);

        try {
            plugin.start();
        } catch (Exception e) {
            logger.error("Exception starting the plugin", e);
        }

    }

    public ManyIasiosPlugin(
            Collection<Value> values,
            MonitorPointSender sender,
            HbProducer hbProducer) {
        super(
                pluginId,
                monitoredSys,
                values,
                System.getProperties(),
                sender,
                null,
                null,
                refreshRate,
                null,
                hbFrequency,
                hbProducer);

        Runtime.getRuntime().addShutdownHook(new Thread( () ->  {
            logger.info("Shutting down");
                try {
                    if (updateThread!=null) {
                        updateThread.interrupt();
                        updateThread.join();
                        logger.info("Update thread terminated");
                    }
                    } catch (Exception e) {
                    logger.warn("Exception while terminating the updater thread", e);
                }
            }
        ));

        logger.info("The plugin {} produces {} different monitor points",pluginId,numOfMPoints);
    }

    @Override
    public void start() throws PublisherException {
        logger.info("Starting the plugin");
        super.start();

        // Start the thread to update the monitor points
        logger.info("Starting the updater thread");
        updateThread = new Thread(this, "MPoints updater");
        updateThread.start();
    }

}

