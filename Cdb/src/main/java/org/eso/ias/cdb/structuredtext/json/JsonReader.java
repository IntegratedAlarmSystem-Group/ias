package org.eso.ias.cdb.structuredtext.json;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.eso.ias.cdb.CdbReader;
import org.eso.ias.cdb.IasCdbException;
import org.eso.ias.cdb.structuredtext.StructuredTextReader;
import org.eso.ias.cdb.structuredtext.json.pojos.*;
import org.eso.ias.cdb.pojos.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

/**
 * Read CDB configuration from JSON files.
 * 
 * As {@link JsonWriter} replaces objects included into other objects 
 * (like ACSEs into a DASU), the reader must reconstruct 
 * the entire tree of objects inclusion before returning the
 * DAO pojos to the caller.
 * 
 * <P>JSON writing and parsing is done with Jackson2 
 * (http://wiki.fasterxml.com/JacksonStreamingApi)
 * 
 * @see CdbReader
 * @author acaproni
 */
public class JsonReader extends StructuredTextReader {

	 /**
     * The logger
     */
    private static final Logger logger = LoggerFactory.getLogger(JsonReader.class);

	/**
	 * Constructor
	 * 
	 * @param cdbFileNames CdbFile to get the name of the file to red
	 */
	public JsonReader(CdbFiles cdbFileNames) {
		super(cdbFileNames);
	}




	

	

	



	

	


	/**
	 * Return the templated IASIOs in input to the given ASCE.
	 *
	 * These inputs are the one generated by a different template than
	 * that of the ASCE
	 * (@see <A href="https://github.com/IntegratedAlarmSystem-Group/ias/issues/124">#!@$</A>)
	 *
	 * @param id The not <code>null</code> nor empty identifier of the ASCE
	 * @return A set of template instance of IASIOs in input to the ASCE
	 * @throws IasCdbException in case of error reading CDB or if the
	 *                         ASCE with the give identifier does not exist
	 */
	@Override
	public Collection<TemplateInstanceIasioDao> getTemplateInstancesIasiosForAsce(String id)
            throws IasCdbException {
		if (closed.get()) {
			throw new IasCdbException("The reader is shut down");
		}
		if (!initialized.get()) {
			throw new IasCdbException("The reader is not initialized");
		}

        if (id ==null || id.isEmpty()) {
            throw new IllegalArgumentException("Invalid null or empty ID");
        }
        Optional<AsceDao> asce = getAsce(id);
        Collection<TemplateInstanceIasioDao> ret = asce.orElseThrow(() -> new IasCdbException("ASCE ["+id+"] not dound")).getTemplatedInstanceInputs();
        return (ret==null)? new ArrayList<>() : ret;
    }










	/**
	 * Get the configuration of the client with the passed identifier.
	 *
	 * The configuration is passed as a string whose format depends
	 * on the client implementation.
	 *
	 * @param id The not null nor empty ID of the IAS client
	 * @return The configuration of the client
	 * @throws IasCdbException In case of error getting the configuration of the client
	 */
	@Override
	public Optional<ClientConfigDao> getClientConfig(String id) throws IasCdbException {
		if (closed.get()) {
			throw new IasCdbException("The reader is shut down");
		}
		if (!initialized.get()) {
			throw new IasCdbException("The reader is not initialized");
		}

	    Objects.requireNonNull(id,"The identifier can't be an null");
        String cleanedID = id.trim();
        if (cleanedID.isEmpty()) {
            throw new IllegalArgumentException("The identifier can't be an empty string");
        }

        try {
            Path configFilePath =  cdbFileNames.getClientFilePath(id);
            if (!canReadFromFile(configFilePath.toFile())) {
                return Optional.empty();
            } else {
                List<String> lines = Files.readAllLines(configFilePath);
                StringBuilder builder = new StringBuilder();
                lines.forEach(l -> {
                    builder.append(l);
                });
                return Optional.of(new ClientConfigDao(cleanedID,builder.toString()));
            }
        } catch (IOException ioe) {
            throw new IasCdbException("Error getting the configuration of the client "+id,ioe);
        }

	}

	/**
	 * Get the configuration of the plugin with the passed identifier.
	 * <p>
	 * The configuration of the plugin can be read from a file or from the CDB.
	 * In both cases, the configuration is returned as #PluginConfigDao.
	 * This m,ethod returns the configuration from the CDB; reading from file is
	 * not implemented here.
	 *
	 * @param id The not null nor empty ID of the IAS plugin
	 * @return The configuration of the plugin
	 * @throws IasCdbException In case of error getting the configuration of the plugin
	 */
	@Override
	public Optional<PluginConfigDao> getPlugin(String id) throws IasCdbException {
		if (closed.get()) {
			throw new IasCdbException("The reader is shut down");
		}
		if (!initialized.get()) {
			throw new IasCdbException("The reader is not initialized");
		}

		Objects.requireNonNull(id,"The identifier  of the plugin can't be an null");
		String cleanedID = id.trim();
		if (cleanedID.isEmpty()) {
			throw new IllegalArgumentException("The identifier of the plugin can't be an empty string");
		}
		logger.debug("Getting plugin config {}",cleanedID);
		if (!cleanedID.equals(id)) {
			logger.warn("CThe passed plugin ID contains blank chars: searching for [{}] instead of [{}]",cleanedID,id);
		}

		try {
			Path pluginFilePath = cdbFileNames.getPluginFilePath(id);
			logger.debug("Getting plugin config from {}",pluginFilePath.toFile().getAbsolutePath());
			if (!canReadFromFile(pluginFilePath.toFile())) {
				logger.error("{} is unreadable",pluginFilePath.toFile().getAbsolutePath());
				return Optional.empty();
			} else {
				// Parse the file in a JSON pojo
				ObjectMapper mapper = new ObjectMapper();
				try {
					PluginConfigDao plConfig = mapper.readValue(pluginFilePath.toFile(), PluginConfigDao.class);
					if (!plConfig.getId().equals(cleanedID)) {
						throw new IasCdbException("CDB ID vs File name misconfiguration for PLUGIN with ID=["+id+"]");
					}
					return Optional.of(plConfig);
				} catch (Exception e) {
					throw new IasCdbException("Error reading parsing plugin configuration from file " + pluginFilePath.toAbsolutePath(), e);
				}
			}
		} catch (Exception e) {
			throw new IasCdbException("Error reading config of plugin " + id, e);
		}
	}



}
