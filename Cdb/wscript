import os
from waflib import Logs

top = '.'
try:
    out
except NameError:
    # out not defined
    out = 'build'

def options(conf):
    pass

def configure(conf):
    Logs.info("Cdb: Configuring...")

def makeInstall(ctx):
    from IasWafBuildTools.Installer import Installer
    installer = Installer(ctx)
    ctx.add_to_group(installer)

def makeBuild(bld):
    #
    # get Jars from extTools
    #
    from IasWafBuildTools.JarTasks import getJarsFromExtTools
    copyExtJarTask = getJarsFromExtTools(bld)
    bld.add_to_group(copyExtJarTask)

    #
    # get jars from ZIP c3p0
    #
    zipFileName="c3p0-0.9.5.2.bin.zip"
    jarsInZip = [
        "c3p0-0.9.5.2.jar",
        "c3p0-oracle-thin-extras-0.9.5.2.jar",
        "mchange-commons-java-0.2.11.jar"
    ]

    from IasWafBuildTools.JarTasks import jarsFromZip
    jarsFromZipTask = jarsFromZip(zipFileName, jarsInZip, bld.env)
    bld.add_to_group(jarsFromZipTask)

    #
    # Get jar from tar
    #
    tarFileName="hibernate-search-5.5.5.Final-dist.tar.gz"
    jars = [
        "antlr-2.7.7.jar",
        "hibernate-commons-annotations-5.0.1.Final.jar",
        "jboss-logging-3.3.0.Final.jar",
        "dom4j-1.6.1.jar",
        "hibernate-core-5.0.11.Final.jar",
        "javassist-3.18.1-GA.jar",
        "lucene-core-5.3.1.jar",
        "xml-apis-1.3.03.jar",
        "hibernate-jpa-2.1-api-1.0.0.Final.jar",
        "jboss-transaction-api_1.2_spec-1.0.0.Final.jar"
    ]

    from IasWafBuildTools.JarTasks import jarsFromTar
    getJarsFromTarTask = jarsFromTar(tarFileName,jars, bld.env)
    bld.add_to_group(getJarsFromTarTask)

    #
    # Python modules
    #
    from IasWafBuildTools.PythonBuilder import buildPythonModules
    bldPyMods = buildPythonModules(bld)
    bld.add_to_group(bldPyMods)

    #
    # Java sources
    #
    from IasWafBuildTools.JavaBuilder import buildJava
    javaBuilder = buildJava(bld)
    javaBuilder.set_run_after(getJarsFromTarTask)
    bld.add_to_group(javaBuilder)

def build(bld):
    bld.load('IasWafBuildTools', tooldir='../WafBuildTools/src/main/python/')
    bld.add_group("Cdb")
    from IasWafBuildTools.Utils import set_env
    set_env(bld.env,bld.path,bld.bldnode)
    bld.env.PREFIX = os.environ['IAS_ROOT']
    
    if bld.cmd == 'build':
        makeBuild(bld)
    elif bld.cmd == 'install':
        makeInstall(bld)
    elif bld.cmd == 'clean':
        Logs.info("Cleaning %s/extTools",bld.bldnode.abspath())
        bld(rule='rm -rf build/*', always=True)
