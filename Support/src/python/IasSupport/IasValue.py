'''
Created on Jun 7, 2018

@author: acaproni
'''
import json
from IasSupport.Iso8601TStamp import Iso8601TStamp
from IasPlugin3.OperationalMode import OperationalMode
from IasSupport.Validity import Validity
from IasPlugin3.IasType import IASType

class IasValue(object):
    '''
    The equivalent of IASValue.java in python
    
    Each parameter is present as string or as native type
    for example a timestamp is present as ISO8601 string and datatime,
    the mode is present as string or as OperationalMode
    '''
    
    # The value
    value = None
    
    # The point in time when the plugin produced this value
    # as ISO 8601 string
    pluginProductionTStampStr = None
    
    # The point in time when the plugin produced this value
    # as datetime
    pluginProductionTStamp = None
    
    # The point in time when the plugin sent the 
    # value to the converter
    # as ISO 8601 string
    sentToConverterTStampStr = None
    
    # The point in time when the plugin sent the 
    # value to the converter
    # as datetime
    sentToConverterTStamp = None
    
    # The point in time when the converter received the  
    # value from the plugin
    # as ISO 8601 string
    receivedFromPluginTStampStr = None
    
    # The point in time when the converter received the  
    # value from the plugin
    # as datetime
    receivedFromPluginTStamp = None
    
    # The point in time when the converter generated
    # the value from the data structure received by the plugin
    # as ISO 8601 string
    convertedProductionTStampStr = None
    
    # The point in time when the converter generated
    # the value from the data structure received by the plugin
    # as datetime
    convertedProductionTStamp = None
    
    # The point in time when the value has been sent to the BSDB
    # as ISO 8601 string
    sentToBsdbTStampStr = None
    
    # The point in time when the value has been sent to the BSDB
    # as datetime
    sentToBsdbTStamp = None
    
    # The point in time when the value has been read from the BSDB
    # as ISO 8601 string
    readFromBsdbTStampStr = None
    
    # The point in time when the value has been read from the BSDB
    # as datetime
    readFromBsdbTStamp = None
    
    # The point in time when the value has been
    # generated by the DASU
    # as ISO 8601 string
    dasuProductionTStampStr = None
    
    # The point in time when the value has been
    # generated by the DASU
    # as datetime
    dasuProductionTStamp= None
    
    # The string representation of the mode of the input
    modeStr = None
    
    # The OperationalMode of the input
    mode = None
    
    # The validity
    iasValidityStr = None
    
    # The validity
    iasValidity = None
    
    # The identifier of the input
    id = None
    
    # The full identifier of the input concatenated with
    # that of its parents.
    fullRunningId = None
    
    # The string representation of the IAS type of this input.
    valueTypeStr = None
    
    # The IAS type of this input.
    valueType = None
    
    # The full running identifiers of the dependent
    # monitor point 
    dependentsFullRuningIds = None
    
    # The additional properties
    props = None
    
    def __init__(self, 
                 value,
                 valueType,
                 fullRunningId,
                 mode,
                 iasValidity):
        '''
        Constructor 
        
        @param value the value of the value (string)
        @param valueType the type of the IASIO (IASType or string)
        @param fullRunningId the full running id (String)
        @parm mode the operational mode (string or OperationalMode)
        @param iasValidity the validity (string or Validity)
        '''
        if not value:
            raise ValueError("Invalid value")
        self.value = value
        
        if valueType is None:
            raise ValueError("Invalid type")
        if isinstance(valueType, IASType):
            self.valueType = valueType
            self.valueTypeStr = valueType.name()
        else:
            self.valueTypeStr = valueType
            self.valueType = IASType.fromString(valueType)
        
        if not fullRunningId:
            raise ValueError("Invalid full running id")
        self.fullRunningId=fullRunningId
        self.id = self.getIdFromFullRunningId(self.fullRunningId)
        
        if mode is None:
            raise ValueError("Invalid mode")
        if isinstance(mode, OperationalMode):
            self.mode = mode
            self.modeStr = mode.name()
        else:
            self.modeStr = mode
            self.mode = OperationalMode.fromString(mode)
            
        if iasValidity is None:
            raise ValueError("Invalid validity")
        if isinstance(iasValidity, Validity):
            self.iasValidity = iasValidity
            self.iasValidityStr = iasValidity.name()
        else:
            self.iasValidityStr = iasValidity
            self.iasValidity = Validity.fromString(iasValidity)
    
    @staticmethod
    def fromJSon(jsonStr):
        '''
        Factory method to build a IasValue for a JSON string
        
        @param jsonStr the json string representing the IASValue
        '''
        fromJsonDict = json.loads(jsonStr)
        
        value = fromJsonDict["value"]
        valueTypeStr = fromJsonDict["valueType"]
        fullRunningId = fromJsonDict["fullRunningId"]
        modeStr = fromJsonDict["mode"]
        iasValidityStr = fromJsonDict["iasValidity"]
        
        iasValue = IasValue(value,valueTypeStr,fullRunningId,modeStr,iasValidityStr)
        
        iasValue.dependentsFullRuningIds = IasValue.getValue(fromJsonDict,"depsFullRunningIds")
        iasValue.props = IasValue.getValue(fromJsonDict,"props")
    
        iasValue.pluginProductionTStampStr = IasValue.getValue(fromJsonDict,"pluginProductionTStamp")
        if iasValue.pluginProductionTStampStr is not None:
            iasValue.pluginProductionTStamp=Iso8601TStamp.Iso8601ToDatetime(iasValue.pluginProductionTStampStr)
            
        iasValue.sentToConverterTStampStr = IasValue.getValue(fromJsonDict,"sentToConverterTStamp")
        if iasValue.sentToConverterTStampStr is not None:
            iasValue.sentToConverterTStamp=Iso8601TStamp.Iso8601ToDatetime(iasValue.sentToConverterTStampStr)
            
        iasValue.receivedFromPluginTStampStr = IasValue.getValue(fromJsonDict,"receivedFromPluginTStamp")
        if iasValue.receivedFromPluginTStampStr is not None:
            iasValue.receivedFromPluginTStamp=Iso8601TStamp.Iso8601ToDatetime(iasValue.receivedFromPluginTStampStr)
            
        iasValue.convertedProductionTStampStr = IasValue.getValue(fromJsonDict,"convertedProductionTStamp")
        if iasValue.convertedProductionTStampStr is not None:
            iasValue.convertedProductionTStamp=Iso8601TStamp.Iso8601ToDatetime(iasValue.convertedProductionTStampStr)
        
        iasValue.sentToBsdbTStampStr = IasValue.getValue(fromJsonDict,"sentToBsdbTStamp")
        if iasValue.sentToBsdbTStampStr is not None:
            iasValue.sentToBsdbTStamp=Iso8601TStamp.Iso8601ToDatetime(iasValue.sentToBsdbTStampStr)
        
        iasValue.readFromBsdbTStampStr = IasValue.getValue(fromJsonDict,"readFromBsdbTStamp")
        if iasValue.readFromBsdbTStampStr is not None:
            iasValue.readFromBsdbTStamp=Iso8601TStamp.Iso8601ToDatetime(iasValue.readFromBsdbTStampStr)
        
        iasValue.dasuProductionTStampStr = IasValue.getValue(fromJsonDict,"dasuProductionTStamp")
        if iasValue.dasuProductionTStampStr is not None:
            iasValue.dasuProductionTStamp=Iso8601TStamp.Iso8601ToDatetime(iasValue.dasuProductionTStampStr)
            
        return iasValue
        
    def getIdFromFullRunningId(self, frid):
        """
        Extract the id from the fullRunningId
        """
        if frid is None or frid is "":
            raise ValueError("The FullRuning ID cannot be empty")
        
        parts = frid.split("@")
        iasioIdList = [t for t in parts if t.count("IASIO")]
        if len(iasioIdList)!=1:
            raise ValueError("Invalid format of fullRunningId"+frid)
        iasioId=iasioIdList[0]
        if iasioId[0] is not '(' or iasioId[len(iasioId)-1] is not ')' or iasioId.count(':') is not 1:
            raise ValueError("Invalid format of fullRunningId"+frid)
        return iasioId[1:-1].split(":")[0]
    
    @staticmethod
    def getValue(jsonDict,key):
        """
        Get a value from the dictionary, if it exists
        
        @param jsonDict: the dictionary
        @param key: the key
        @return the value of the key if exists, None otherwise
        """
        try:
            ret = jsonDict[key]
        except:
            ret = None
        return ret
    
    def toJSonString(self):
        """
        @return the JSON representation of the IasValue
        """
        temp = {
             "value":self.value,
             "valueType":self.valueTypeStr,
             "fullRunningId":self.fullRunningId,
             "mode":self.modeStr,
             "iasValidity":self.iasValidityStr
             }
        
        if self.dependentsFullRuningIds is not None:
            temp["depsFullRunningIds"]=self.dependentsFullRuningIds
        if self.props is not None:
            temp["props"]=self.props
        if self.pluginProductionTStampStr is not None:
            temp["pluginProductionTStamp"]=self.pluginProductionTStampStr
        if self.sentToConverterTStampStr is not None:
            temp["sentToConverterTStamp"]=self.sentToConverterTStampStr
        if self.receivedFromPluginTStampStr is not None:
            temp["receivedFromPluginTStamp"]=self.receivedFromPluginTStampStr
        if self.convertedProductionTStampStr is not None:
            temp["convertedProductionTStamp"]=self.convertedProductionTStampStr
        if self.sentToBsdbTStampStr is not None:
            temp["sentToBsdbTStamp"]=self.sentToBsdbTStampStr
        if self.readFromBsdbTStampStr is not None:
            temp["readFromBsdbTStamp"]=self.readFromBsdbTStampStr
        if self.dasuProductionTStampStr is not None:
            temp["dasuProductionTStamp"]=self.dasuProductionTStampStr
             
        return json.dumps(temp)
    
    def toString(self,verbose=False):
        """
        @param verbose if True prints all the fields
        @return the JSON representation of the IasValue
        """
        temp = {
             "value":self.value,
             "valueType":self.valueTypeStr,
             "fullRunningId":self.fullRunningId,
             "mode":self.modeStr,
             "iasValidity":self.iasValidityStr
             }
        
        if not verbose:
            return "ID=%s, value=%s, type=%s, mode=%s, validity=%s" % \
            (self.id,self.value,self.valueTypeStr,self.modeStr,self.iasValidityStr)
        
        t = "ID="+self.id
        t = t + "\nvalue="+self.value
        t = t + "\ntype="+self.valueTypeStr
        t = t + "\nmode="+self.modeStr
        t = t + "\nvalidity="+self.iasValidityStr
        
        
        if self.dependentsFullRuningIds is not None:
            t= "%s\nfullRunningID=%s" % (t,self.dependentsFullRuningIds)
            
        if self.props is not None and len(self.props)>0:
            t = t+"\nProperties:"
            for k in self.props.keys():
                t = "%s\n  %s=%s" % (t,k,self.props[k])
            
        if self.pluginProductionTStampStr is not None:
            t = "%s\npluginProductionTStamp=%s" % (t,self.pluginProductionTStampStr)
            
        if self.sentToConverterTStampStr is not None:
            t = "%s\nsentToConverterTStamp=%s" % (t,self.sentToConverterTStampStr)
            
        if self.receivedFromPluginTStampStr is not None:
            t = "%s\nreceivedFromPluginTStamp=%s" % (t,self.receivedFromPluginTStampStr)
            
        if self.convertedProductionTStampStr is not None:
            t = "%s\nconvertedProductionTStamp=%s" % (t,self.convertedProductionTStampStr)
            
        if self.sentToBsdbTStampStr is not None:
            t = "%s\nsentToBsdbTStamp=%s" % (t,self.sentToBsdbTStampStr)
            
        if self.readFromBsdbTStampStr is not None:
            t = "%s\nreadFromBsdbTStamp=%s" % (t,self.readFromBsdbTStampStr)
            
        if self.dasuProductionTStampStr is not None:
            t = "%s\ndasuProductionTStamp=%s" % (t,self.dasuProductionTStampStr)
             
        return t
    