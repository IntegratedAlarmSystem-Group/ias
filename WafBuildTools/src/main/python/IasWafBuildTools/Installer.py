# Install the artifacts to the destination folder

from waflib.Task import Task
import glob
import shutil
import os

class Installer(Task):
    '''
    The installer copy files generated by the build into the folder pointed by PREFIX
    '''
    def __init__(self, environ):
        '''
        Build the Installer.

        :param environ: Build environment
        '''
        super(Installer, self).__init__(env=environ)
        self.srcNode = self.env.DSTNODE
        self.destFolder = self.env.PREFIX
        self.moduleFolders = [ 'bin', 'lib', 'extTools', 'config']
        # A dictionary to associate each the files to their destination
        self.filesToInstall = {}
        self.foldersToCreate = {}
        self.getFilesToInstall()

    def getFilesToInstall(self):
        '''
        Build the dictionary of files to install
        :return:
        '''
        for moduleFolder in self.moduleFolders:
            self.foldersToCreate[self.srcNode.abspath() + '/'+moduleFolder] = self.destFolder+'/'+moduleFolder
        newFoldersToCreate = {}
        for srcModFolder, dstModFolder in self.foldersToCreate.items():
            filesInFolder = glob.iglob(srcModFolder+'/**/*', recursive=True)
            for f in filesInFolder:
                print("============>>>>>>>>>>>>>>> processing ", f)
                fName = f.split(srcModFolder+'/')[1]
                destFName = dstModFolder+'/'+fName

                if os.path.isdir(f):
                    print("============>>>>>>>>>>>>>>> adding folder", f)
                    newFoldersToCreate[f] = destFName
                else:
                    print("============>>>>>>>>>>>>>>> adding file", f)
                    self.filesToInstall[f] = destFName
        self.foldersToCreate.update(newFoldersToCreate)

    def run(self):
        '''
        Copy the files to the folder pointed by PREFIX

        :param self:
        :return:
        '''
        for src, dest in self.foldersToCreate.items():
            print("============>>>>>>>>>>>>>>> creating folder %s ==> %s" % (src, dest))
            if not os.path.exists(dest):
                    os.makedirs(dest)
        for src, dest in self.filesToInstall.items():
            print("============>>>>>>>>>>>>>>> Installing %s ==> %s" % (src, dest))
            shutil.copyfile(src, dest)
