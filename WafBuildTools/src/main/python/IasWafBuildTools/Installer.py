# Install the artifacts to the destination folder
#
# Object of the Installer class do not use methods like Build.install_files
# because such methods have no effect during the build (they work only during waf install)

import os.path, shutil
from pathlib import Path
from glob import iglob
from waflib import Logs
from waflib.Task import Task
from IasWafBuildTools.FileTasks import CopyTask

class Installer(Task):
    '''
    The installer copy files generated by the build into the folder pointed by PREFIX
    using python commands i.e. it does not instantiate Waf tasks
    '''

    def __init__(self, ctx, srcNode=None, destFolder=None):
        '''
        Build the Installer.

        :param ctx: the build context
        :param srcNode: Source node folder; if None then env.DSTNODE (module/build) is used
        :param destFolder: Destination folder; if None then PREFIX is used
        '''
        assert ctx
        super(Installer, self).__init__(env=ctx.env)
        self.ctx = ctx
        self.srcNode = srcNode
        if self.srcNode is None:
            self.srcNode = ctx.env.DSTNODE
        self.destFolder = destFolder
        if not self.destFolder:
            self.destFolder = ctx.env.PREFIX
        self.color = 'BLUE'
        Logs.info("Installer: src node %s", self.srcNode.abspath())
        Logs.info("Installer: dst folder %s", self.destFolder)
        Logs.info("Installer: will install from %s ---to---> %s ", self.srcNode.abspath(), self.destFolder)
        self.foldersToInstall = [ 'bin', 'lib', 'extTools', 'config']
        self.buildInputs()

    def buildInputs(self):
        Logs.info("Installer: building inputs")
        for folder in self.foldersToInstall:
            Logs.info("Building input files from folder %s", folder)
            prefix = "%s/%s" % (self.ctx.env.PREFIX, folder)
            folderNode = self.srcNode.find_node(folder)
            if not folderNode:
                continue

            if not os.path.exists(prefix):
                os.mkdir(prefix)

            nodeFilesToInstall = folderNode.ant_glob("**/*")
            self.set_inputs(nodeFilesToInstall)

            nodesCleaned = list(map(lambda n: n.abspath().split(folderNode.abspath()+'/')[1], nodeFilesToInstall))
            print("nodesCleaned", nodesCleaned)

    def run(self):
        '''
        Install the files in the destination folder

        :param srcDirs The list of folders containing files to be installed
        :return:
        '''
        Logs.info("Installer: Installing files from %s ---to---> %s", self.srcNode, self.destFolder)

        for folder in self.foldersToInstall:
            prefix = "%s/%s" % (self.ctx.env.PREFIX, folder)
            folderNode = self.srcNode.find_node(folder)
            if not folderNode:
                Logs.info("Installer: node %s/%s not found: nothing to install", self.srcNode.abspath(), folder)
                continue
            nodes = folderNode.ant_glob("**/*")

            nodesCleaned = list(map(lambda n: n.abspath().split(folderNode.abspath()+'/')[1], nodes))
            print("Folder:", folderNode.abspath(), "files:", nodesCleaned, "dest:",prefix,"is install:", self.ctx.is_install)

            for node in nodes:
                cmd = 'cp '+node.abspath()+' '+prefix
                print(cmd)
                self.ctx(rule=cmd, always=True)

            if len(nodes)>0:
                self.ctx.install_files(
                    prefix,
                    nodes,
                    relative_trick=True,
                    cwd=folderNode,
                    postpone=True)




