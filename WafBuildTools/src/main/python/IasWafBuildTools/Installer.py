# Install the artifacts to the destination folder
#
# Object of the Installer class do not use methods like Build.install_files
# because such methods have no effectduring the build (they work only during waf install)

import os.path, shutil
from pathlib import Path
from glob import iglob
from waflib import Logs

class Installer(object):
    '''
    The installer copy files generated by the build into the folder pointed by PREFIX
    '''
    def __init__(self, ctx, srcFolder, destFolder):
        '''
        Build the Installer.

        :param ctx Build context
        :param srcNode Source node folder
        :param destFolder Destination folder
        '''
        assert ctx
        assert srcFolder
        assert destFolder
        self.ctx = ctx
        self.srcFolder = srcFolder
        self.destFolder = destFolder

        Logs.debug("Installer: obj built with source %s and destination %s " % (self.srcFolder, self.destFolder))

        self.foldersToInstall = [ 'bin', 'lib', 'extTools', 'config']


    def install(self):
        '''
        Build the dictionary of files to install

        :param srcDirs The list of folders containing files to be installed
        :return:
        '''
        Logs.info("Installer: Installing files from %s to %s",  self.srcFolder, self.destFolder)
        for dirToInstall in self.foldersToInstall:
            dest = "%s/%s" % (self.destFolder,dirToInstall)
            Path(dest).mkdir(parents=True, exist_ok=True)

            Logs.info("Installer: processing %s --> %s " % (dirToInstall,dest))

            startDir = "%s/%s" % (self.srcFolder, dirToInstall)
            # if startDir is None:
            #     Logs.debug("Installer: folder %s empty: nothing to install", startDir)
            #     continue

            if not os.path.exists(startDir):
                Logs.info("Installer: No folder %s found", startDir)
                continue

            filesToCopy = iglob(startDir + '**/*', recursive=True)

            for fileToCopy in filesToCopy:
                base = fileToCopy.split(self.srcFolder)
                destName = self.destFolder+base[1]

                # Create folders in the destination if it does not already exist
                destPath = Path(destName).parent
                destPath.mkdir(parents=True, exist_ok=True)
                shutil.copy2(fileToCopy,destName)
                Logs.info("Installer %s --> %s",fileToCopy ,destName)

        Logs.info("Installer: Installation from %s done", self.srcFolder)



