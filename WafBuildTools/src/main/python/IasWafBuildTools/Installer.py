# Install the artifacts to the destination folder


import os.path

class Installer(object):
    '''
    The installer copy files generated by the build into the folder pointed by PREFIX
    '''
    def __init__(self, ctx, srcNode, destFolder):
        '''
        Build the Installer.

        :param ctx Build context
        :param srcNode Source node folder
        :param destFolder Destination folder
        '''
        assert ctx
        assert srcNode
        assert destFolder
        self.ctx = ctx
        self.srcNode = srcNode
        self.destFolder = destFolder

        print("============>>>>>>>>>>>>>>> Installer built: %s ---> %s " % (self.srcNode, self.destFolder))

        self.foldersToInstall = [ 'bin', 'lib', 'extTools', 'config']


    def install(self):
        '''
        Build the dictionary of files to install

        :param srcDirs The list of folders containing files to be installed
        :return:
        '''
        print("============>>>>>>>>>>>>>>> Installing...")
        for dirToInstall in self.foldersToInstall:
            dest = "%s/%s" % (self.destFolder,dirToInstall)
            if not os.path.exists(dest):
                self.ctx.exec_command("mkdir "+dest)
            print("============>>>>>>>>>>>>>>> processing %s --> %s " % (dirToInstall,dest))

            startDir = self.srcNode.find_dir(dirToInstall)
            if startDir is None:
                continue
            print("============>>>>>>>>>>>>>> startDir", startDir.abspath())

            files = startDir.ant_glob('**/*')

            if len(files)>0:
                print("============>>>>>>>>>>>>>> files", files)
                self.ctx.install_files(dest, startDir.ant_glob('**/*'), cwd=startDir, relative_trick=True)
            else:
                print("============>>>>>>>>>>>>>>> nothing to be installed from", dirToInstall)

        print("============>>>>>>>>>>>>>>> Installation done")



