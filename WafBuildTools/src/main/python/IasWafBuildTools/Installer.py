# Install the artifacts to the destination folder
#
# Object of the Installer class do not use methods like Build.install_files
# because such methods have no effectduring the build (they work only during waf install)

import os.path, shutil
from pathlib import Path
from glob import iglob
from waflib import Logs
from waflib.Task import Task
from IasWafBuildTools.FileTasks import CopyTask

class Installer(object):
    '''
    The installer copy files generated by the build into the folder pointed by PREFIX
    using python commands i.e. it does not instantiate Waf tasks
    '''

    def __init__(self, srcFolder, destFolder):
        '''
        Build the Installer.

        :param srcNode: Source node folder
        :param destFolder: Destination folder
        '''
        assert srcFolder
        assert destFolder
        self.srcFolder = srcFolder
        self.destFolder = destFolder

        Logs.info("Installer: will installs from %s ---to---> %s " % (self.srcFolder, self.destFolder))

        self.foldersToInstall = [ 'bin', 'lib', 'extTools', 'config']

    def install(self):
        '''
        Build the dictionary of files to install

        :param srcDirs The list of folders containing files to be installed
        :return:
        '''
        Logs.info("Installer: Installing files from %s to %s",  self.srcFolder, self.destFolder)
        for dirToInstall in self.foldersToInstall:
            dest = "%s/%s" % (self.destFolder,dirToInstall)
            Path(dest).mkdir(parents=True, exist_ok=True)

            Logs.info("Installer: processing %s --> %s " % (dirToInstall,dest))

            startDir = "%s/%s" % (self.srcFolder, dirToInstall)
            # if startDir is None:
            #     Logs.debug("Installer: folder %s empty: nothing to install", startDir)
            #     continue

            if not os.path.exists(startDir):
                Logs.info("Installer: No folder %s found", startDir)
                continue

            filesToCopy = iglob(startDir + '**/*', recursive=True)

            for fileToCopy in filesToCopy:
                base = fileToCopy.split(self.srcFolder)
                destName = self.destFolder+base[1]

                # Create folders in the destination if it does not already exist
                destPath = Path(destName).parent
                destPath.mkdir(parents=True, exist_ok=True)
                if not os.path.isdir(fileToCopy): # Sskip creation of directories
                    shutil.copy2(fileToCopy,destName)
                    Logs.info("Installer: %s --> %s",fileToCopy ,destName)

        Logs.info("Installer: Installation from %s done", self.srcFolder)

class InstallerTask(Task):
    '''
    Install files from the source folder to the destination folder
    by delegating to the Installer.
    '''

    def __init__(self, srcNode, destFolder, ctx):
        '''
        Build the Installer.

        :param srcNode: Source Waf node
        :param destFolder: Destination folder
        :param ctx: Waf build context
        '''
        super(InstallerTask, self).__init__(env=ctx.env)
        assert ctx
        assert srcNode
        assert destFolder

        self.inst = Installer(self.srcNode.abspath(), self.destFolder)

    def run(self):
        Logs.info("InstallerTask: Installing files from %s to %s",  self.srcNode, self.destFolder)

        self.inst.install()
