top = '.'
try:
    out
except NameError:
    # out not defined
    out = 'build'

import os
from waflib import Logs

def options(conf):
    pass

def configure(conf):
    Logs.info("Utils: Configuring...")

def makeInstall(ctx):
    from IasWafBuildTools.Installer import Installer
    installer = Installer(ctx)
    ctx.add_to_group(installer)

def makeBuild(bld, env):
    '''
    Make the build

    :param bld: The build context
    :param env: The environment
    :return:
    '''

    Logs.info("Building %s", bld.path.abspath())

    #
    # Python modules
    #
    from IasWafBuildTools.PythonBuilder import buildPythonModules
    bldPyMods = buildPythonModules(env)
    bld.add_to_group(bldPyMods)

    #
    # Python scripts
    #
    from IasWafBuildTools.FileTasks import CopyTask
    bldPyScripts = CopyTask(
        env,
        env.PYSRCFOLDER,
        env.BLDBINFOLDER,
        remove_extension=True,
        make_executable=True,
        file_extension=".py"
    )
    bldPyScripts.color = 'GREY'
    bld.add_to_group(bldPyScripts)

    #
    # Scala sources
    #
    from IasWafBuildTools.ScalaBuilder import buildScala
    scalaBuilder = buildScala(env)
    bld.add_to_group(scalaBuilder)

    #
    # Build the jar
    #
    from IasWafBuildTools.JarTasks import buildJar
    jarBuilder = buildJar(env, "iasUtils.jar")
    jarBuilder.set_run_after(scalaBuilder)
    bld.add_to_group(jarBuilder)

def build(bld):
    bld.load('IasWafBuildTools', tooldir='../WafBuildTools/src/main/python/')
    bld.add_group("Utils")
    from IasWafBuildTools.Utils import set_env
    env = bld.env.derive()
    set_env(env, bld.path, bld.bldnode)
    env.PREFIX = os.environ['IAS_ROOT']

    if bld.cmd == 'build':
        makeBuild(bld, env)
    elif bld.cmd == 'install':
        makeInstall(bld)
    elif bld.cmd == 'clean':
        Logs.info("Cleaning %s", bld.bldnode.abspath())
        bld(rule='rm -rf build/*', always=True)
